facet_wrap(~ type) +
geom_step() +
scale_y_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1), labels = scales::percent) +
scale_x_continuous(breaks = seq(0, max(surv_pop$time), max(round(max(surv_pop$time) / 15), 1))) +
ylab("Survival Probability (%)") +
xlab("Time to Event") +
scale_alpha(range = c(min(surv_comb$alpha), 1))+
guides(alpha = "none") +
geom_text(data = end_db, aes(x = time, y = surv_prob, label = round(surv_prob * 100, digits = 0)),
vjust = -0.3, hjust = 0.8, show.legend = FALSE, size = 3.3) +
annotation_custom(grob = grid::textGrob(paste(c(paste("The sample has a", sep = ""),
paste("p-value = ", signif(pvalues2, digits = 2), sep = ""),
"(global test of Trt.)"), collapse = "\n"),
x = grid::unit(1.05, "npc"),
y = grid::unit(0.08, "npc"),
hjust = 0,
gp = grid::gpar(fontsize = 9))) +
coord_cartesian(clip = "off") +
theme(plot.margin = margin(5.5, 20, 5.5, 5.5))
} else {
surv_plots = ggplot(data = surv_comb, aes(x = time, y = surv_prob, colour = Trt.ID, group = interaction(n_simul, Trt.ID))) +
facet_wrap(~ type) +
geom_step(aes(alpha = alpha)) +
scale_y_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1), labels = scales::percent) +
scale_x_continuous(breaks = seq(0, max(surv_pop$time), max(round(max(surv_pop$time) / 15), 1))) +
ylab("Survival Probability (%)") +
xlab("Time to Event") +
scale_alpha(range = c(min(surv_comb$alpha), 1)) +
guides(alpha = "none") +
geom_text(data = end_db[end_db$type == "Population / truth",],
aes(x = time, y = surv_prob, label = round(surv_prob * 100, digits = 0)),
vjust = -0.3, hjust = 0.8, show.legend = FALSE, size = 3.3) +
annotation_custom(grob = grid::textGrob(paste(c(paste(perc_sf, " of the sample", sep = ""),
paste("sets (n) has p < 0.05", sep = ""),
"(global test of Trt.)"), collapse = "\n"),
x = grid::unit(1.05, "npc"),
y = grid::unit(0.08, "npc"),
hjust = 0,
gp = grid::gpar(fontsize = 9))) +
coord_cartesian(clip = "off") +
theme(plot.margin = margin(5.5, 20, 5.5, 5.5))
}
if(!is.null(plot_name)) {
eoffice::topptx(figure = surv_plots, filename = paste(plot_name, ".pptx", sep = ""), width = 6, height = 4)
ggsave(paste(plot_name, ".tiff", sep = ""), dpi = 900, width = 6.3, height = 4, plot = surv_plots)
}
# return(list(simul_surv_db = Surv_simul_DB,
#             surv_plots = surv_plots,
#             population_surv_db = popu_surv_db))
surv_plots
surv_plots
?merge
Surv_Gen
Surv_Gen()
library(safuncs)
Surv_Gen
Surv_Gen
Surv_Gen
remotes::install_github("sean4andrew/safuncs")
safuncs::Surv_Gen
Surv_Plots = function(surv_db,
plot_prefix = "plot_prefix",
xlim = NULL,
ylim = c(0, 1),
xlab = "Days Post Challenge",
lambda = NULL,
phi = NULL,
dailybin = TRUE,
plot = "both",
colours = NULL,
theme = "ggplot",
trt_order = NULL) {
library(ggplot2)
if(is.null(xlim)) {xlim <- c(0, max(surv_db$TTE))}
if(plot == "surv" | plot == "both") {
surv_obj = survminer::surv_fit(survival::Surv(TTE, Status) ~ Trt.ID, data = surv_db)
attributes(surv_obj$strata)$names <- levels(as.factor(surv_db$Trt.ID))
surv_dat = data.frame(Trt.ID = summary(surv_obj)$strata,
Survprob = summary(surv_obj)$surv,
Time = summary(surv_obj)$time)
surv_plot = survminer::ggsurvplot(surv_obj,
conf.int = FALSE,
ggtheme = theme(plot.background = element_rect(fill = "white")),
break.y.by = 0.1,
break.x.by = max(round(max(xlim) / 15), 1),
xlim = xlim,
ylim = ylim,
xlab = xlab,
surv.scale = "percent")
Survival_Plot = surv_plot$plot + theme(legend.position = "right") + guides(color = guide_legend("Trt.ID"))
eoffice::topptx(figure = Survival_Plot, filename = paste(plot_prefix, "Survival Curve.pptx"), width = 6, height = 4)
if(!is.null(colours)) {Survival_Plot = Survival_Plot + scale_color_manual(values = colours)}
if(theme == "prism") {Survival_Plot = Survival_Plot + ggprism::theme_prism()}
ggsave(paste(plot_prefix, "Survival Curve.tiff"), dpi = 300, width = 6, height = 4, plot = Survival_Plot)
}
if(dailybin == TRUE) {dbin <- max(surv_db$TTE)}
if(dailybin == FALSE) {dbin <- NULL}
#create Haz_list
if(plot == "haz" | plot == "both") {
Haz_list = list()
for(Haz_Trt in levels(as.factor(surv_db$Trt.ID))) {
surv_db_trt = surv_db[surv_db$Trt.ID == Haz_Trt,]
if(sum(surv_db_trt$Status) == 0){
Haz_list[[Haz_Trt]] = data.frame(Hazard = 0,
Time = rep(0, max(surv_db$TTE), 1))
} else {
if(length(levels(as.factor(surv_db_trt$Tank.ID))) > 1) {
Haz_bs = bshazard::bshazard(nbin = dbin,
data = surv_db_trt,
survival::Surv(TTE, Status) ~ Tank.ID,
verbose = FALSE,
lambda = lambda,
phi = phi)
} else {
Haz_bs = bshazard::bshazard(nbin = dbin,
data = surv_db_trt,
survival::Surv(TTE, Status) ~ 1,
verbose = FALSE,
lambda = lambda,
phi = phi)
}
Haz_list[[Haz_Trt]] = data.frame(Hazard = Haz_bs$hazard,
Time = Haz_bs$time)
}
}
haz_db = dplyr::bind_rows(Haz_list, .id = "Trt.ID")
if(!is.null(trt_order)){haz_db$Trt.ID = factor(haz_db$Trt.ID, levels = trt_order)}
Hazard_Plot = ggplot(data = haz_db, aes(x = Time, y = Hazard, color = Trt.ID)) +
geom_line(linewidth = 1) +
geom_point() +
xlab(xlab) +
scale_x_continuous(breaks = seq(from = min(xlim),
to = max(xlim),
by = max(round(max(xlim) / 15), 1)),
limits = xlim)
if(!is.null(colours)) {Hazard_Plot = Hazard_Plot + scale_color_manual(values = colours)}
if(theme == "prism") {Hazard_Plot = Hazard_Plot + ggprism::theme_prism()}
ggsave(paste(plot_prefix, "Hazard Curve.tiff"), dpi = 300, width = 6, height = 4, plot = Hazard_Plot)
eoffice::topptx(figure = Hazard_Plot, filename = paste(plot_prefix, "Hazard Curve.pptx"), width = 6, height = 4)
}
if(plot == "surv") {return(list(Survival_Plot = Survival_Plot, Survival_DB = surv_dat))}
if(plot == "haz") {return(list(Hazard_Plot = Hazard_Plot, Hazard_DB = haz_db))}
if(plot == "both") {return(list(Survival_Plot = Survival_Plot, Hazard_Plot = Hazard_Plot))}
}
source("~/GitHub/safuncs/R/safuncs.R")
source("~/GitHub/safuncs/R/safuncs.R")
remotes::install_github("sean4andrew/safuncs")
?Surv_Plots()
safuncs::Surv_Plots
Surv_Plots = function(surv_db,
plot_prefix = "plot_prefix",
xlim = NULL,
ylim = c(0, 1),
xlab = "Days Post Challenge",
lambda = NULL,
phi = NULL,
dailybin = TRUE,
plot = "both",
colours = NULL,
theme = "ggplot",
trt_order = NULL,
data_out = FALSE) {
library(ggplot2)
if(is.null(xlim)) {xlim <- c(0, max(surv_db$TTE))}
if(!is.null(trt_order)){surv_db$Trt.ID = factor(surv_db$Trt.ID, levels = trt_order)}
if(plot == "surv" | plot == "both") {
surv_obj = survminer::surv_fit(survival::Surv(TTE, Status) ~ Trt.ID, data = surv_db)
attributes(surv_obj$strata)$names <- levels(as.factor(surv_db$Trt.ID))
surv_dat = data.frame(Trt.ID = summary(surv_obj)$strata,
Survprob = summary(surv_obj)$surv,
Time = summary(surv_obj)$time)
surv_plot = survminer::ggsurvplot(surv_obj,
conf.int = FALSE,
ggtheme = theme(plot.background = element_rect(fill = "white")),
break.y.by = 0.1,
break.x.by = max(round(max(xlim) / 15), 1),
xlim = xlim,
ylim = ylim,
xlab = xlab,
surv.scale = "percent")
Survival_Plot = surv_plot$plot + theme(legend.position = "right") + guides(color = guide_legend("Trt.ID"))
if(theme == "prism") {Survival_Plot = Survival_Plot + ggprism::theme_prism()}
eoffice::topptx(figure = Survival_Plot, filename = paste(plot_prefix, "Survival Curve.pptx"), width = 6, height = 4)
if(!is.null(colours)) {Survival_Plot = Survival_Plot + scale_color_manual(values = colours)}
ggsave(paste(plot_prefix, "Survival Curve.tiff"), dpi = 300, width = 6, height = 4, plot = Survival_Plot)
}
if(dailybin == TRUE) {dbin <- max(surv_db$TTE)}
if(dailybin == FALSE) {dbin <- NULL}
#create Haz_list
if(plot == "haz" | plot == "both") {
Haz_list = list()
for(Haz_Trt in levels(as.factor(surv_db$Trt.ID))) {
surv_db_trt = surv_db[surv_db$Trt.ID == Haz_Trt,]
if(sum(surv_db_trt$Status) == 0){
Haz_list[[Haz_Trt]] = data.frame(Hazard = 0,
Time = rep(0, max(surv_db$TTE), 1))
} else {
if(length(levels(as.factor(surv_db_trt$Tank.ID))) > 1) {
Haz_bs = bshazard::bshazard(nbin = dbin,
data = surv_db_trt,
survival::Surv(TTE, Status) ~ Tank.ID,
verbose = FALSE,
lambda = lambda,
phi = phi)
} else {
Haz_bs = bshazard::bshazard(nbin = dbin,
data = surv_db_trt,
survival::Surv(TTE, Status) ~ 1,
verbose = FALSE,
lambda = lambda,
phi = phi)
}
Haz_list[[Haz_Trt]] = data.frame(Hazard = Haz_bs$hazard,
Time = Haz_bs$time)
}
}
haz_db = dplyr::bind_rows(Haz_list, .id = "Trt.ID")
if(!is.null(trt_order)){haz_db$Trt.ID = factor(haz_db$Trt.ID, levels = trt_order)}
Hazard_Plot = ggplot(data = haz_db, aes(x = Time, y = Hazard, color = Trt.ID)) +
geom_line(linewidth = 1) +
geom_point() +
xlab(xlab) +
scale_x_continuous(breaks = seq(from = min(xlim),
to = max(xlim),
by = max(round(max(xlim) / 15), 1)),
limits = xlim)
if(!is.null(colours)) {Hazard_Plot = Hazard_Plot + scale_color_manual(values = colours)}
if(theme == "prism") {Hazard_Plot = Hazard_Plot + ggprism::theme_prism()}
ggsave(paste(plot_prefix, "Hazard Curve.tiff"), dpi = 300, width = 6, height = 4, plot = Hazard_Plot)
eoffice::topptx(figure = Hazard_Plot, filename = paste(plot_prefix, "Hazard Curve.pptx"), width = 6, height = 4)
}
if(data_out == TRUE) {
if(plot == "surv") {return(list(Survival_Plot = Survival_Plot, Survival_DB = surv_dat))}
if(plot == "haz") {return(list(Hazard_Plot = Hazard_Plot, Hazard_DB = haz_db))}
if(plot == "both") {return(list(Survival_Plot = Survival_Plot, Survival_DB = surv_dat, Hazard_Plot = Hazard_Plot, Hazard_DB = haz_db))}
} else {
if(plot == "surv") {return(Survival_Plot = Survival_Plot)}
if(plot == "haz") {return(Hazard_Plot = Hazard_Plot)}
if(plot == "both") {return(list(Survival_Plot = Survival_Plot, Hazard_Plot = Hazard_Plot))}
}
}
list(1)
a = list(Surv_simul_DB_store)
a
str(a)
a
?Surv_Plots()
library(safuncs)
data(surv_db_ex)
surv_db_ex
data(iris)
iris
library(coxme)
tolower
data("iris")
str(iris)
tolower(iris$Sepal.Length)
colnames(iris) = tolower(colnames(iris))
iris
str(iris)
?Surv_Gen()
remotes::install_github("sean4andrew/safuncs")
Sys.getenv("GITHUB_PAT")
Sys.unsetenv("GITHUB_PAT")
Sys.getenv("GITHUB_PAT")
remotes::install_github("sean4andrew/safuncs")
github_pat
library(remotes)
library(devtools)
Sys.getenv()
Sys.getenv("GITHUB_PAT")
Sys.getenv("GITHUB_TOKEN")
gitcreds::gitcreds_get()
gitcreds::gitcreds_get()$password
library(safuncs)
mort_db_ex
mort_db_ex
library(bshazard)
bshazard(data = surv_db_ex, survival::Surv(TTE, Status) ~ Trt.ID)
bshazard(data = surv_db_ex, survival::Surv(TTE, Status) ~ Trt.ID, verbose = FALSE)
a = bshazard(data = surv_db_ex, survival::Surv(TTE, Status) ~ Trt.ID)
a
str(a)
a$hazard
data.frame(a)
summary(a)
summary(a)$HazardEstimates
z = data.frame(summary(a)$HazardEstimates)
z
?Surv_Plots()
library(minnows)
minnow
library(minnows)
sessionInfo()
library(dplur)
library(ggplot2)
?ggplot()
?Surv_Simul()
remotes::install_github("sean4andrew/safuncs")
detach("package:safuncs", unload = TRUE)
remotes::install_github("sean4andrew/safuncs")
library(safuncs)
?safuncs::Surv_Simul()
?Surv_Simul()
?Surv_Simul()
?Surv_Plots()
?theme_Publication()
?Surv_Plots()
?Surv_Simul()
?Surv_Simul()
?Surv_Simul()
foo <- list( str='R', vec=c(1,2,3), bool=TRUE )
foo
foo['bool']
foo[['bool']]
?Surv_Simul()
theme_Publication()
?Surv_Simul()
?Surv_Simul()
?Surv_Simul()
usethis::use_version()
usethis::use_version()
usethis::use_version()
library(safuncs)
?Surv_Simul()
?Surv_Simul()
?safuncs()
?safuncs
??safuncs
library(safuncs)
?Surv_Simul()
?ggplot()
devtools::check()
rm(list = c("Con_Simul", "Con_Simul_PR", "GG_Colour_Hue", "Surv_Gen", "Surv_Plots", "Surv_Pred", "Surv_Simul", "theme_Publication"))
devtoos::document()
devtools::document()
pkgdown::build_site()
data(mort_db_ex)
?theme_Publication()
devtoos::check()
devtools::check()
pwr
library(pwr)
check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
data(mort_db_ex)
surv_dat = Surv_Gen(mort_db = mort_db_ex,
starting_fish_count = 100,
last_tte = 54)
surv_dat
surv_dat_A = surv_dat[surv_dat$Trt.ID == "A", ]
surv_dat_A
as.factor(surv_dat_A)
as.factor(surv_dat_A$Trt.ID)
surv_dat[surv_dat$Trt.ID == "A", ]
surv_dat_A = surv_dat[surv_dat$Trt.ID == "A", ]
levels(as.factor(surv_dat_A$Trt.ID))
surv_obj = survminer::surv_fit(survival::Surv(TTE, Status) ~ Trt.ID, data = surv_dat_A)
attributes(surv_obj$strata)
attributes(surv_obj$strata)$names
surv_obj$strata
surv_obj$strata = 1
surv_obj$strata
surv_obj2 = survminer::surv_fit(survival::Surv(TTE, Status) ~ Trt.ID, data = surv_db_ex)
surv_obj2
surv_obj2$strata
surv_obj2$strata$names
attributes(surv_obj2$strata)
attributes(surv_obj2$strata)$names
surv_obj2$strata = c("A")
surv_obj2$strata
surv_obj2$strata = c("A", "B", "C", "D")
surv_obj2$strata
suvminer::ggsurvplot(surv_obj2)
survminer::ggsurvplot(surv_obj2)
surv_obj2 = survminer::surv_fit(survival::Surv(TTE, Status) ~ Trt.ID, data = surv_db_ex)
survminer::ggsurvplot(surv_obj2)
survminer::ggsurvplot(surv_obj)
surv_obj_A = survminer::surv_fit(survival::Surv(TTE, Status) ~ Trt.ID, data = surv_dat_A)
survminer::ggsurvplot(surv_obj_A)
str(surv_obj_A)
surv_obj_A
summary(surv_obj_A)
surv_obj_A$surv
surv_obj_A$type
surv_obj_A$call
surv_obj$strata
surv_obj_A$strata
surv_obj2$strata
surv_obj2
surv_obj2$strata
surv_obj2$surv
length(surv_obj2$surv)
25 + 29 + 26 + 26
surv_obj_A
surv_obj_A$strata
length(surv_obj_A$surv)
surv_obj_A$strata = 25
attributes(surv_obj_A$strata)$names = "A"
surv_obj_A
surv_obj_A$strata
survminer::ggsurvplot(surv_obj_A)
devtools::check()
devtools::check()
Surv_Plots(surv_db = surv_dat_A)
surv_db = surv_dat_A
library(ggplot2)
if(is.null(xlim)) {xlim <- c(0, max(surv_db$TTE))}
if(!is.null(trt_order)){surv_db$Trt.ID = factor(surv_db$Trt.ID, levels = trt_order)}
trt_order = NULL
library(ggplot2)
if(is.null(xlim)) {xlim <- c(0, max(surv_db$TTE))}
if(!is.null(trt_order)){surv_db$Trt.ID = factor(surv_db$Trt.ID, levels = trt_order)}
surv_obj = survminer::surv_fit(survival::Surv(TTE, Status) ~ Trt.ID, data = surv_db)
if(length(surv_db$Trt.ID) > 1) {
attributes(surv_obj$strata)$names <- levels(as.factor(surv_db$Trt.ID))
} else {
surv_obj$strata = length(surv_obj$surv)
attributes(surv_obj$strata)$names <- levels(as.factor(surv_db$Trt.ID))
}
length(surv_db$Trt.ID) > 1
length(surv_db$Trt.ID)
Surv_Plots(surv_dat_A)
if(length(levels(as.factor(surv_db$Trt.ID))) > 1) {
attributes(surv_obj$strata)$names <- levels(as.factor(surv_db$Trt.ID))
} else {
surv_obj$strata = length(surv_obj$surv)
attributes(surv_obj$strata)$names <- levels(as.factor(surv_db$Trt.ID))
}
devtools::checl()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
?devtools::check()
?devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
theme_foundation(base_family = "Arial")
theme_foundation(base_family = "helvetica")
devtools::check()
data(iris)
library(ggplot2)
ggplot(data = iris, aes(x = Species, colour = Species, y = Petal.Length)) +
geom_boxplot() +
theme_Publication()
devtools::check()
ggplot(data = iris, aes(x = Species, colour = Species, y = Petal.Length)) +
geom_boxplot() +
theme_Publication()
devtools::check()
devtools::build_manual()
rlang::last_trace()
devtools::build_manual()
devtools::document()
devtools::build_manual()
devtools::build_manual()
devtools::check(manual=TRUE)
install.packages("knitr")
library(knitr)
install.packages("tinytex")
tinytex::install_tinytex()
tinytex::install_tinytex()
devtools::build_manual()
getwd()
setwd("C:\Users\sean4\Documents\GitHub\safuncs")
setwd("C:/Users/sean4/Documents/GitHub/safuncs")
devtools::build_manual()
Sys.getenv("PATH")
devtools::build_manual()
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"C:/Program Files/MiKTeX 2.9/miktex/bin/x64/",sep=";"))
Sys.getenv("PATH")
devtools::build_manual()
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"C:/Users/MY_USER_NAME/AppData/Local/Programs/MiKTeX/miktex/bin/x64",sep=";"))
devtools::build_manual()
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"C:/Users/sean4/AppData/Local/Programs/MiKTeX/miktex/bin/x64",sep=";"))
devtools::build_manual()
?build_manual()
devtools::build_manual()
pkgdown::build_site()
pkgdown::build_site()
?pkgdown::build_site()
?safuncs()
?Surv_Simul()
?pkgdown::build_site()
pkgdown::build_site()
pvalues
pvalues
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
detach("package:safuncs", unload = TRUE)
pkgdown::build_site()
devtools::check()
devtools::check()
devtools::check()
pkgdown::build_site()
detach("package:safuncs", unload = TRUE)
pkgdown::build_site()
detach("package:safuncs", unload = TRUE)
pkgdown::build_site()
?Surv_Simul()
library(safuncs)
?Surv_Simul()
