"0","haz_db = ref_haz_route_safuncs"
"0","fish_num_per_tank = 100"
"0","tank_num_per_trt = 4"
"0","treatments_hr = c(1, 1, 1, 1)"
"0","logHR_sd_intertank = 0"
"0","sampling_specs = NULL"
"0","n_sim = 1"
"0","plot_out = TRUE"
"0","pop_out = TRUE"
"0","plot_name = ""Surv_Simul-Plot-Output"""
"0","theme = ""ggplot2"""
"0","  "
"0",""
"0","  #Initialize objects to store loop results"
"0","  surv_samps = data.frame()"
"0","  Surv_simul_outDB = data.frame()"
"0","  pvalues = c()"
"0","  colnames(haz_db) = tolower(colnames(haz_db))"
"0",""
"0","  #Simulate survival dataframe"
"0","  for(loopnum in 1:n_sim) {"
"0",""
"0","    CDF_Yval = c()"
"0",""
"0","    for(Treatment_Term in treatments_hr) {"
"0",""
"0","      for(Tank_num in 1:tank_num_per_trt) {"
"0",""
"0","        #Random sampling"
"0","        Tank_eff = rnorm(n = 1, mean = 0, sd = logHR_sd_intertank)"
"0",""
"0","        U = runif(n = fish_num_per_tank, min = 0, max = 1)"
"0",""
"0","        CDF_Yval_temp = -log(U) * exp(-(log(Treatment_Term) + Tank_eff))"
"0","        CDF_Yval = append(CDF_Yval, CDF_Yval_temp)"
"0","      }"
"0","    }"
"0",""
"0","    #Get Time to Event"
"0","    TTE = approx(x = cumsum(haz_db$hazard), y = haz_db$time, xout = CDF_Yval, method = ""linear"")$y"
"0","    TTE = round(TTE, digits = 0)"
"0",""
"0","    #Turn NA (from out of bound CDF_Yval) to the last follow up time"
"0","    TTE = ifelse(is.na(TTE), max(haz_db$time), TTE)"
"0",""
"0","    #Label Status (1 - dead, or 0 - survived) given TTE, and create survival dataframe"
"0","    Surv_simul_DB = data.frame(TTE = TTE,"
"0","                               Status = ifelse(TTE == max(haz_db$time), 0, 1),"
"0","                               Trt.ID = as.factor(rep(c(""Control"", LETTERS[2:length(treatments_hr)]),"
"0","                                                      each = fish_num_per_tank * tank_num_per_trt, times = n_sim)),"
"0","                               Tank.ID = as.factor(rep(1:(length(treatments_hr) * tank_num_per_trt),"
"0","                                                       each = fish_num_per_tank, times = n_sim)),"
"0","                               n_sim = loopnum)"
"0",""
"0","    #Transform TTE and Status in certain rows due to sampling"
"0","    if(!is.null(sampling_specs)) {"
"0",""
"0","      #Repeat for each specified sampling time and each tank"
"0","      for(samp_time in 1:length(sampling_specs$TTE)) {"
"0","        for(tank_num in levels(Surv_simul_DB$Tank.ID)) {"
"0",""
"0","          rows_sel = sample(x = which(Surv_simul_DB[Surv_simul_DB$Tank.ID == tank_num, ""TTE""] > sampling_specs$TTE[samp_time]),"
"0","                            size = sampling_specs$Amount[samp_time],"
"0","                            replace = FALSE)"
"0",""
"0","          Surv_simul_DB$TTE[rows_sel] = sampling_specs$TTE[samp_time]"
"0","          Surv_simul_DB$Status[rows_sel] = 0"
"0","        }"
"0","      }"
"0","    }"
"0",""
"0","    #Get p-value for plots"
"0","    pvalues = append(pvalues, survival::survdiff(survival::Surv(TTE, Status) ~ Trt.ID, Surv_simul_DB)$pvalue)"
"0",""
"0","    #Simulated survival data to be provided as output"
"0","    Surv_simul_outDB = rbind(Surv_simul_outDB, Surv_simul_DB)"
"0",""
"0","    #Transform simulated survival data for plotting purposes"
"0","    surv_obj = survival::survfit(survival::Surv(TTE, Status) ~ Trt.ID, data = Surv_simul_DB)"
"0","      if(length(levels(as.factor(Surv_simul_DB$Trt.ID))) > 1) {"
"0","        attributes(surv_obj$strata)$names <- levels(as.factor(Surv_simul_DB$Trt.ID))"
"0","      } else {"
"0","        surv_obj$strata = length(surv_obj$surv)"
"0","        attributes(surv_obj$strata)$names <- levels(as.factor(Surv_simul_DB$Trt.ID))"
"0","      }"
"0",""
"0","    surv_samps_temp = data.frame(Trt.ID = summary(surv_obj)$strata,"
"0","                                 surv_prob = summary(surv_obj)$surv,"
"0","                                 time = summary(surv_obj)$time,"
"0","                                 type = paste(""Sample (n = "", n_sim, "")"", sep = """"),"
"0","                                 n_sim = loopnum,"
"0","                                 alpha = 1 - (0.0001 ^ (1/n_sim)))"
"0",""
"0","    surv_samps_ends = data.frame(surv_samps_temp %>%"
"0","                                   dplyr::group_by(Trt.ID) %>%"
"0","                                   dplyr::reframe(surv_prob = c(1, min(surv_prob)),"
"0","                                                  time = c(floor(min(haz_db$time)), ceiling(max(haz_db$time))),"
"0","                                                  n_sim = loopnum,"
"0","                                                  alpha = 1 - (0.0001 ^ (1/n_sim))))"
"0","    surv_samps_ends$type = paste(""Sample (n = "", n_sim, "")"", sep = """")"
"0",""
"0","    surv_samps = rbind(surv_samps, surv_samps_temp, surv_samps_ends)"
"0","  }"
"0",""
"0","  #Get ""population"" survival dataset by exponentiating the negative cumulative hazard"
"0","  surv_pop = data.frame(Trt.ID = as.factor(rep(c(""Control"", LETTERS[2:length(treatments_hr)]), each = length(haz_db$hazard))),"
"0","                        surv_prob = exp(-as.vector(apply(haz_db$hazard %*% t(treatments_hr), 2, cumsum))),"
"0","                        time = rep(haz_db$time, times = length(treatments_hr)),"
"0","                        type = ""Population / truth"","
"0","                        n_sim = 1,"
"0","                        alpha = 1)"
"0",""
"0","  #To the end of creating survival plots"
"0","  surv_comb = rbind(surv_samps, surv_pop)"
"0","  surv_comb$type = factor(surv_comb$type, levels = c(paste(""Sample (n = "", n_sim, "")"", sep = """"), ""Population / truth""))"
"0","  surv_comb$Trt.ID = factor(surv_comb$Trt.ID, levels = rep(c(""Control"", LETTERS[2:length(treatments_hr)])))"
"0",""
"0","    #Get end_sr for population plots and sample plots"
"0","    end_db = data.frame(surv_comb %>%"
"0","                          dplyr::group_by(type, Trt.ID, n_sim) %>%"
"0","                          dplyr::summarise(surv_prob = min(surv_prob), time = max(TTE), .groups = ""drop"") %>%"
"0","                          dplyr::group_by(type, Trt.ID) %>%"
"0","                          dplyr::summarise(surv_prob = mean(surv_prob), time = max(time), .groups = ""drop""))"
"0",""
"0","    #Get % significance (i.e. power) for plotting"
"0","    perc_sf = paste(round(100 * sum(pvalues < 0.05) / length(pvalues), digits = 0), ""%"", sep = """")"
"0",""
"0","    #Ggplot"
"0","    if(n_sim == 1) {"
"0","      surv_plots = ggplot(data = surv_comb, aes(x = time, y = surv_prob, colour = Trt.ID, group = interaction(n_sim, Trt.ID))) +"
"0","        facet_wrap(~ type) +"
"0","        geom_step() +"
"0","        scale_y_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1), labels = scales::percent) +"
"0","        scale_x_continuous(breaks = seq(0, max(surv_pop$time), max(round(max(surv_pop$time) / 15), 1))) +"
"0","        ylab(""Survival Probability (%)"") +"
"0","        xlab(""Time to Event"") +"
"0","        scale_alpha(range = c(min(surv_comb$alpha), 1))+"
"0","        guides(alpha = ""none"") +"
"0","        geom_text(data = end_db, aes(x = time, y = surv_prob, label = round(surv_prob * 100, digits = 0)),"
"0","                  vjust = -0.3, hjust = 0.8, show.legend = FALSE, size = 3.3) +"
"0","        annotation_custom(grob = grid::textGrob(paste(c(paste(""The sample has a"", sep = """"),"
"0","                                                        paste(""p-value = "", signif(pvalues, digits = 2), sep = """"),"
"0","                                                        ""(global test of Trt.)""), collapse = ""\n""),"
"0","                                                x = grid::unit(1.05, ""npc""),"
"0","                                                y = grid::unit(0.08, ""npc""),"
"0","                                                hjust = 0,"
"0","                                                gp = grid::gpar(fontsize = 9))) +"
"0","        coord_cartesian(clip = ""off"") +"
"0","        theme(plot.margin = margin(5.5, 20, 5.5, 5.5))"
"0",""
"0","    } else {"
"0","      surv_plots = ggplot(data = surv_comb, aes(x = time, y = surv_prob, colour = Trt.ID, group = interaction(n_sim, Trt.ID))) +"
"0","        facet_wrap(~ type) +"
"0","        geom_step(aes(alpha = alpha)) +"
"0","        scale_y_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1), labels = scales::percent) +"
"0","        scale_x_continuous(breaks = seq(0, max(surv_pop$time), max(round(max(surv_pop$time) / 15), 1))) +"
"0","        ylab(""Survival Probability (%)"") +"
"0","        xlab(""Time to Event"") +"
"0","        scale_alpha(range = c(min(surv_comb$alpha), 1)) +"
"0","        guides(alpha = ""none"") +"
"0","        geom_text(data = end_db[end_db$type == ""Population / truth"",],"
"0","                  aes(x = time, y = surv_prob, label = round(surv_prob * 100, digits = 0)),"
"0","                  vjust = -0.3, hjust = 0.8, show.legend = FALSE, size = 3.3) +"
"0","        annotation_custom(grob = grid::textGrob(paste(c(paste(perc_sf, "" of the sample"", sep = """"),"
"0","                                                        paste(""sets (n) has p < 0.05"", sep = """"),"
"0","                                                        ""(global test of Trt.)""), collapse = ""\n""),"
"0","                                                x = grid::unit(1.03, ""npc""),"
"0","                                                y = grid::unit(0.08, ""npc""),"
"0","                                                hjust = 0,"
"0","                                                gp = grid::gpar(fontsize = 9))) +"
"0","        coord_cartesian(clip = ""off"") +"
"0","        theme(plot.margin = margin(5.5, 20, 5.5, 5.5))"
"0",""
"0","    }"
"0",""
"0","  #Plot theme"
"0","  if(theme == ""prism"") {surv_plots = surv_plots + ggprism::theme_prism()}"
"0",""
"0","  #Save plots and return outputs"
"0","  if(!is.null(plot_name)) {"
"0","    eoffice::topptx(figure = surv_plots, filename = paste(plot_name, "".pptx"", sep = """"), width = 6, height = 4)"
"0","    ggsave(paste(plot_name, "".tiff"", sep = """"), dpi = 900, width = 6, height = 4, plot = surv_plots)"
"0","  }"
"0",""
"0","  if(plot_out == FALSE && pop_out == FALSE) {"
"0",""
"0","    return(simul_surv_db = Surv_simul_outDB)"
"0",""
"0","    } else {"
"0",""
"0","      output = list(simul_surv_db = Surv_simul_outDB)"
"0","      if(plot_out == TRUE) {output$surv_plots <- surv_plots}"
"0","      if(pop_out == TRUE) {output$population_surv_db <- surv_pop}"
"0","      return(output)"
"0","    }"
"2","Error: no function to return from, jumping to top level
"
