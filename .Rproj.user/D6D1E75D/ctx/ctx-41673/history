#Save plot
ggsave(paste("Simul_Surv_Plot",
ifelse(length(list_var) == 1, "_", paste("_Element", ele_num, "_", sep ="")),
Sys.Date(), ".tiff", sep = ""), dpi = 900, width = 7, height = 4, plot = surv_plots)
surv_pop = surv_pop[, -6] #remove "alpha" column from data output
#Return R output if list_var length = 1 (i.e. no list)
if(length(list_var) == 1) {
if(plot_out == FALSE & pop_out == FALSE) {
return(simul_surv_db = Surv_simul_outDB)
} else {
output = list(simul_surv_db = Surv_simul_outDB)
if(plot_out == TRUE) {
output$surv_plots <- surv_plots
if(logHR_sd_intertank > 0 & exp_design == "between-tank") {
print("NOTE: You specified a tank effect/variability, but the power shown in the figure is based of the log-rank test which assumes no such effects. Additionally, you specified a between-tank experimental design. As a result, the power of the log-rank test can increase/decrease. Meanwhile its false positive rate (FPR) will increase. Importantly, FPR could rise far above 5% which is implied when researchers preset their test's alpha to 0.05 (hence the claim of 5% FPR is untrue). To calculate power of more appropriate statistical test(s) see safuncs::Surv_Power().")
}
if(logHR_sd_intertank > 0 & exp_design == "within-tank") {
print("NOTE: You specified a tank effect/variability, but the power shown in the figure is based of the log-rank test which assumes no such effects. Additionally, you specified a within-tank experimental design. As a result, the power of the log-rank test could be less than what is deserved given the data structure in a within-tank design. To calculate power of more appropriate statistical test(s) see safuncs::Surv_Power().")
}
}
if(pop_out == TRUE) {output$population_surv_db <- surv_pop}
return(output)
}
}
if(length(list_var) > 1) {
#Store 2nd output if list_var length >1
output2$surv_plots[[ele_num]] = surv_plots
output2$simul_surv_db = rbind(output2$simul_surv_db, Surv_simul_outDB)
output2$population_surv_db = rbind(output2$population_surv_db, surv_pop)
}
#Old code (non-lists stuff) ends here
} #This closes the loop that deals with lists
if(length(list_var) > 1){
if(plot_out == FALSE) {
output2$surv_plots = NULL
} else {
if(logHR_sd_intertank > 0 & exp_design == "within-tank") {
print("NOTE: You specified a tank effect/variability, but the power shown in the figure is based of the log-rank test which assumes no such effects. Additionally, you specified a within-tank experimental design. As a result, the power of the log-rank test could be less than what is deserved given the data structure in a within-tank design. To calculate power of more appropriate statistical test(s) see safuncs::Surv_Power().")
}
if(logHR_sd_intertank > 0 & exp_design == "between-tank") {
print("NOTE: You specified a tank effect/variability, but the power shown in the figure is based of the log-rank test which assumes no such effects. Additionally, you specified a between-tank experimental design. As a result, the power of the log-rank test can increase/decrease. Meanwhile its false positive rate (FPR) will increase. Importantly, FPR could rise far above 5% which is implied when researchers preset their test's alpha to 0.05 (hence the claim of 5% FPR is untrue). To calculate power of more appropriate statistical test(s) see safuncs::Surv_Power().")
}
}
if(pop_out == FALSE) {
output2$population_surv_db = NULL
}
return(output2)
}
}
Surv_Simul2 = function(haz_db = haz_db_ex,
fish_num_per_tank = 100, #can be a list
tank_num_per_trt = 3, #can be a list
treatments_hr = c(1, 0.5), #can be a list
logHR_sd_intertank = 0.5, #can be a list
sampling_specs = list(data.frame(TTE = c(20, 30),
Amount = c(10, 10),
Trt.ID = c("Control", "A")),
data.frame(TTE = c(40, 50),
Amount = c(10, 10),
Trt.ID = c("Control", "A"))), #can be a list
n_sim = 2,
plot_out = TRUE,
pop_out = TRUE,
exp_design = "within-tank",
theme = "ggplot2") {
#Making sure input data has correct (lower case) column names
colnames(haz_db) = tolower(colnames(haz_db))
#Initialize objects to store second output type (across list elements and loops)
output2 = list(surv_plots = list(), simul_surv_db = data.frame(), population_surv_db = data.frame())
#Finding the input variable (var_name) that is a list and store info in var_list
var_names = c("fish_num_per_tank", "tank_num_per_trt", "treatments_hr", "logHR_sd_intertank", "sampling_specs")
for (var_name in var_names) {
ifelse(is.list(get(var_name, envir = environment()))
& !is.data.frame(get(var_name, envir = environment())),
list_var <- get(var_name, envir = environment()),
list_var <- "empty")
if(length(list_var) > 1) {
break
}
}
#Change var_name based on list_var elements
for (ele_num in 1:length(list_var)) {
#if you have list elements, assign and print. If not just jump straight to old code
if(length(list_var) > 1) { #if you have list elements, assign and print, otherwise just go to old code.
assign(var_name, list_var[[ele_num]]) #assign
print(paste("Simulating for ", #print
paste(var_name),
" list element #",
ele_num,
sep = ""))
}
#Old code below. Will only run once if there is no list (i.e. length(list_var) = 1)
#Initialize objects to store loop results
surv_samps = data.frame() #for plotting purposes
cens_db = data.frame() #for plotting purposes
pvalues = c() #for plotting purposes
Surv_simul_outDB = data.frame() #for dataoutput
#Simulate survival dataframe
for(loopnum in 1:n_sim) {
CDF_Yval = c()
Trt.ID = c()
Tank.ID = c()
Tank_num2 = 0
iTT = 0
if(exp_design == "between-tank") { #simulation procedure for between-tanks experimental design
for(Treatment_Term in treatments_hr) {
iTT = iTT + 1
for(Tank_num in 1:ifelse(length(tank_num_per_trt) > 1, tank_num_per_trt[iTT], tank_num_per_trt)) {
Tank_num2 = Tank_num2 + 1
#Random sampling
Tank_eff = rnorm(n = 1, mean = 0, sd = logHR_sd_intertank)
U = runif(n = ifelse(length(fish_num_per_tank) > 1, fish_num_per_tank[iTT], fish_num_per_tank), min = 0, max = 1)
CDF_Yval_temp = -log(U) * exp(-(log(Treatment_Term) + Tank_eff))
CDF_Yval = append(CDF_Yval, CDF_Yval_temp)
Trt.ID = c(Trt.ID, rep(c("Control", LETTERS[1:(length(treatments_hr) - 1)])[iTT], length(CDF_Yval_temp)))
Tank.ID = c(Tank.ID, rep(Tank_num2, length(CDF_Yval_temp)))
}
}
}
if(exp_design == "within-tank") { #simulation procedure for within-tank experimental design. Similar but with flipped Tank-Trt loops.
for(Tank_num in 1:tank_num_per_trt) { #only 1 tank num can be specified for the within-tank design.
Tank_num2 = Tank_num2 + 1
#Tank effect
Tank_eff = rnorm(n = 1, mean = 0, sd = logHR_sd_intertank)
iTT = 0
for(Treatment_Term in treatments_hr) {
iTT = iTT + 1
#Simulate fish numbers per treatment for each tank. Write down in description that it must be per treatment per tank.
#Can be as vector for treatment specific numbers or can be a single value if the same across treatments.
U = runif(n = ifelse(length(fish_num_per_tank) > 1, fish_num_per_tank[iTT], fish_num_per_tank), min = 0, max = 1)
CDF_Yval_temp = -log(U) * exp(-(log(Treatment_Term) + Tank_eff))
CDF_Yval = append(CDF_Yval, CDF_Yval_temp)
Trt.ID = c(Trt.ID, rep(c("Control", LETTERS[1:(length(treatments_hr) - 1)])[iTT], length(CDF_Yval_temp)))
Tank.ID = c(Tank.ID, rep(Tank_num2, length(CDF_Yval_temp)))
}
}
}
#Get Time to Event
TTE = approx(x = cumsum(haz_db$hazard), y = haz_db$time, xout = CDF_Yval, method = "linear")$y
TTE = round(TTE, digits = 0)
#Turn NA (from out of bound CDF_Yval) to the last follow up time
TTE = ifelse(is.na(TTE), max(haz_db$time), TTE)
#Label Status (1 - dead, or 0 - survived) given TTE, and create survival dataframe
Surv_simul_DB = data.frame(TTE = TTE,
Status = ifelse(TTE == max(haz_db$time), 0, 1),
Trt.ID = Trt.ID,
Tank.ID = Tank.ID,
n_sim = loopnum)
#Transform TTE and Status (to 0) in certain rows due to sampling
if(!is.null(sampling_specs)) {
if(!"Trt.ID" %in% colnames(sampling_specs)) {
Trt_levels = unique(Surv_simul_DB$Trt.ID)
sampling_specs = data.frame(TTE = rep(sampling_specs$TTE, each = length(Trt_lvls)),
Amount = rep(sampling_specs$Amount, each = length(Trt_lvls)),
Trt.ID = rep(unique(Trt_levels, times = nrow(sampling_specs))))
}
#Put in Tank.ID and replicate accordingly
sampling_specs2 = merge(sampling_specs, unique(Surv_simul_DB[, 3:4]))
#Run through every row of sampling_specs and sample accordingly
for(samp_row in 1:nrow(sampling_specs2)) {
rows_samp_space = which(Surv_simul_DB$Trt.ID == sampling_specs2$Trt.ID[samp_row] &
Surv_simul_DB$Tank.ID == sampling_specs2$Tank.ID[samp_row] &
Surv_simul_DB$TTE > sampling_specs2$TTE[samp_row])
#Catch over sampling situation and print message
if(length(rows_samp_space) < sampling_specs2$Amount[samp_row]) {
print(paste(sep = "", "In simulation set-", loopnum, " Trt.ID-", sampling_specs2$Trt.ID[samp_row], ", Tank.ID-",
sampling_specs2$Tank.ID[samp_row],
", you requested more samples than the fish alive! All remaining (living) fish sampled."))
#Modify sampling amount
sampling_specs2$Amount[samp_row] = length(rows_samp_space)
}
#Select rows that were sampled
rows_sel = sample(x = rows_samp_space,
size = sampling_specs2$Amount[samp_row],
replace = FALSE)
#Change Status and Time for sampled individuals
Surv_simul_DB$TTE[rows_sel] = sampling_specs2$TTE[samp_row]
Surv_simul_DB$Status[rows_sel] = 0
}
}
#Get p-value for plots
pvalues = append(pvalues, survival::survdiff(survival::Surv(TTE, Status) ~ Trt.ID, Surv_simul_DB)$pvalue)
#Simulated survival data to be provided as output
if(length(list_var) > 1){Surv_simul_DB$list_element_num <- ele_num}
Surv_simul_outDB = rbind(Surv_simul_outDB, Surv_simul_DB)
#Transform simulated survival data for plotting purposes
surv_obj = survival::survfit(survival::Surv(TTE, Status) ~ Trt.ID, data = Surv_simul_DB)
if(length(levels(as.factor(Surv_simul_DB$Trt.ID))) > 1) {
attributes(surv_obj$strata)$names <- levels(as.factor(Surv_simul_DB$Trt.ID))
} else {
surv_obj$strata = length(surv_obj$surv)
attributes(surv_obj$strata)$names <- levels(as.factor(Surv_simul_DB$Trt.ID))
}
surv_samps_temp = data.frame(Trt.ID = summary(surv_obj)$strata,
surv_prob = summary(surv_obj)$surv,
time = summary(surv_obj)$time,
type = paste("Sample set (n = ", n_sim, ")", sep = ""),
n_sim = loopnum,
alpha = 1 - (0.0001 ^ (1/n_sim)))
if(length(list_var) > 1){surv_samps_temp$list_element_num <- ele_num}
surv_samps_ends = data.frame(surv_samps_temp %>%
dplyr::group_by(Trt.ID) %>%
dplyr::reframe(surv_prob = c(1, min(surv_prob)),
time = c(floor(min(haz_db$time)), ceiling(max(haz_db$time))),
n_sim = loopnum,
alpha = 1 - (0.0001 ^ (1/n_sim))))
surv_samps_ends$type = paste("Sample set (n = ", n_sim, ")", sep = "")
if(length(list_var) > 1){surv_samps_ends$list_element_num <- ele_num}
surv_samps = rbind(surv_samps, surv_samps_temp, surv_samps_ends)
if(!is.null(sampling_specs)){
#Get survival probability at mid censoring
cens_db_temp  = data.frame(Trt.ID = summary(surv_obj, time = sampling_specs$TTE)$strata,
surv_prob = summary(surv_obj, time = sampling_specs$TTE)$surv,
time = summary(surv_obj, time = sampling_specs$TTE)$time,
n_sim = loopnum,
type = as.factor(paste("Sample set (n = ", n_sim, ")", sep = "")))
cens_db = rbind(cens_db, cens_db_temp)
}
}
#Get "population" survival dataset by exponentiating the negative cumulative hazard
pop_haz_db = data.frame(approx(x = haz_db$time, y = haz_db$hazard, xout = seq(min(haz_db$time), max(haz_db$time), 0.1), method = "linear"))
colnames(pop_haz_db) = c("time", "hazard")
#For use with old surv_prob method (revived)
surv_pop = data.frame(Trt.ID = as.factor(rep(c("Control", LETTERS[1:(length(treatments_hr) - 1)]), each = length(haz_db$hazard))),
#cumhaz_prob = as.vector(apply((haz_db$hazard) %*% t(treatments_hr), 2, cumsum)),
surv_prob = exp(-as.vector(apply(haz_db$hazard %*% t(treatments_hr), 2, cumsum))),
time = rep(haz_db$time, times = length(treatments_hr)),
type = "Population / truth",
n_sim = 1,
alpha = 1)
if(length(list_var) > 1){surv_pop$list_element_num <- ele_num}
#To the end of creating survival plots
surv_comb = rbind(surv_samps, surv_pop)
surv_comb$type = factor(surv_comb$type, levels = c(paste("Sample set (n = ", n_sim, ")", sep = ""), "Population / truth"))
surv_comb$Trt.ID = factor(surv_comb$Trt.ID, levels = rep(c("Control", LETTERS[1:(length(treatments_hr) - 1)])))
#Get end_sr for population plots and sample plots
end_db = data.frame(surv_comb %>%
dplyr::group_by(type, Trt.ID, n_sim) %>%
dplyr::summarise(surv_prob = min(surv_prob), time = max(TTE), .groups = "drop") %>%
dplyr::group_by(type, Trt.ID) %>%
dplyr::summarise(surv_prob = mean(surv_prob), time = max(time), .groups = "drop"))
#Get % significance (i.e. power) for plotting
perc_sf = paste(round(100 * sum(pvalues < 0.05) / length(pvalues), digits = 0), "%", sep = "")
#Ggplot
surv_plots = ggplot(data = surv_comb, aes(x = time, y = surv_prob, colour = Trt.ID, group = interaction(n_sim, Trt.ID))) +
facet_wrap(~ type) +
geom_step(aes(alpha = alpha)) +
scale_y_continuous(breaks = seq(0, 1, 0.1), limits = c(0, 1), labels = scales::percent) +
scale_x_continuous(breaks = seq(0, max(surv_pop$time), max(round(max(surv_pop$time) / 12), 1))) +
ylab("Survival Probability (%)") +
xlab("Time to Event") +
scale_alpha(range = c(min(surv_comb$alpha), 1)) +
guides(alpha = "none") +
coord_cartesian(clip = "off") +
theme(plot.margin = margin(5.5, 20, 5.5, 5.5))
if(n_sim == 1) {
surv_plots = surv_plots +
geom_text(data = end_db, aes(x = time, y = surv_prob, label = round(surv_prob * 100, digits = 0)),
vjust = -0.3, hjust = 0.8, show.legend = FALSE, size = 3.3) +
annotation_custom(grob = grid::textGrob(paste(c(paste("The sample has a", sep = ""),
paste("p-value = ", signif(pvalues, digits = 2), sep = ""),
"(global test of Trt.)"), collapse = "\n"),
x = grid::unit(1.05, "npc"),
y = grid::unit(0.08, "npc"),
hjust = 0,
gp = grid::gpar(fontsize = 9)))
} else {
surv_plots = surv_plots +
geom_text(data = end_db[end_db$type == "Population / truth",],
aes(x = time, y = surv_prob, label = round(surv_prob * 100, digits = 0)),
vjust = -0.3, hjust = 0.8, show.legend = FALSE, size = 3.3) +
annotation_custom(grob = grid::textGrob(paste(c(paste(perc_sf, " of the sample", sep = ""),
paste("sets (n) has p<0.05", sep = ""),
"(global test of Trt.)"), collapse = "\n"),
x = grid::unit(1.03, "npc"),
y = grid::unit(0.08, "npc"),
hjust = 0,
gp = grid::gpar(fontsize = 9)))
}
#Add censoring points
if(!is.null(sampling_specs)) {
merged_db = merge(sampling_specs2, Surv_simul_DB)
merged_db = merged_db[merged_db$Status == 0, ]
cens_db = cens_db[interaction(cens_db$Trt.ID, cens_db$time) %in% interaction(merged_db$Trt.ID, merged_db$TTE),]
surv_plots = surv_plots +
geom_point(data = cens_db, aes(x = time, y = surv_prob, colour = Trt.ID), shape = 3, size = 0.7, stroke = 1)
}
#Plot theme
if(theme == "prism") {surv_plots = surv_plots + ggprism::theme_prism()}
#Save plot
ggsave(paste("Simul_Surv_Plot",
ifelse(length(list_var) == 1, "_", paste("_Element", ele_num, "_", sep ="")),
Sys.Date(), ".tiff", sep = ""), dpi = 900, width = 7, height = 4, plot = surv_plots)
surv_pop = surv_pop[, -6] #remove "alpha" column from data output
#Return R output if list_var length = 1 (i.e. no list)
if(length(list_var) == 1) {
if(plot_out == FALSE & pop_out == FALSE) {
return(simul_surv_db = Surv_simul_outDB)
} else {
output = list(simul_surv_db = Surv_simul_outDB)
if(plot_out == TRUE) {
output$surv_plots <- surv_plots
if(logHR_sd_intertank > 0 & exp_design == "between-tank") {
print("NOTE: You specified a tank effect/contribution to variation, but the power shown in the figure is based of the log-rank test which assumes no such effects. Additionally, you specified a between-tank experimental design. As a result, the power of the log-rank test can increase/decrease. Meanwhile its false positive rate (FPR) will increase. Importantly, FPR could rise far above 5% which is implied when researchers preset their test's alpha to 0.05 (hence the claim of 5% FPR is untrue). To calculate power of more appropriate statistical test(s) see safuncs::Surv_Power().")
}
if(logHR_sd_intertank > 0 & exp_design == "within-tank") {
print("NOTE: You specified a tank effect/contribution to variation, but the power shown in the figure is based of the log-rank test which assumes no such effects. Additionally, you specified a within-tank experimental design. As a result, the power of the log-rank test could be less than what is deserved given the data structure in a within-tank design. To calculate power of more appropriate statistical test(s) see safuncs::Surv_Power().")
}
}
if(pop_out == TRUE) {output$population_surv_db <- surv_pop}
return(output)
}
}
if(length(list_var) > 1) {
#Store 2nd output if list_var length >1
output2$surv_plots[[ele_num]] = surv_plots
output2$simul_surv_db = rbind(output2$simul_surv_db, Surv_simul_outDB)
output2$population_surv_db = rbind(output2$population_surv_db, surv_pop)
}
#Old code (non-lists stuff) ends here
} #This closes the loop that deals with lists
if(length(list_var) > 1){
if(plot_out == FALSE) {
output2$surv_plots = NULL
} else {
if(logHR_sd_intertank > 0 & exp_design == "within-tank") {
print("NOTE: You specified a tank effect/contribution to variation, but the power shown in the figure is based of the log-rank test which assumes no such effects. Additionally, you specified a within-tank experimental design. As a result, the power of the log-rank test could be less than what is deserved given the data structure in a within-tank design. To calculate power of more appropriate statistical test(s) see safuncs::Surv_Power().")
}
if(logHR_sd_intertank > 0 & exp_design == "between-tank") {
print("NOTE: You specified a tank effect/contribution to variation, but the power shown in the figure is based of the log-rank test which assumes no such effects. Additionally, you specified a between-tank experimental design. As a result, the power of the log-rank test can increase/decrease. Meanwhile its false positive rate (FPR) will increase. Importantly, FPR could rise far above 5% which is implied when researchers preset their test's alpha to 0.05 (hence the claim of 5% FPR is untrue). To calculate power of more appropriate statistical test(s) see safuncs::Surv_Power().")
}
}
if(pop_out == FALSE) {
output2$population_surv_db = NULL
}
return(output2)
}
}
?safuncs::Surv_Simul()
detach("package:safuncs", unload = TRUE)
library(pkgdown)
pkgdown::build_site()
paste("Simul_Surv_Plot_",
Sys.Date(), ".tiff", sep = "")
detach("package:safuncs", unload = TRUE)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
detach("package:safuncs", unload = TRUE)
pkgdown::build_site()
var_names = c("fish_num_per_tank", "tank_num_per_trt", "treatments_hr", "logHR_sd_intertank", "sampling_specs")
for (var_name_check in var_names) {
if(is.list(get(var_name, envir = environment())) & !is.data.frame(get(var_name, envir = environment()))){
list_var_check = c(list_var_check, get(var_name, envir = environment()))
}
}
var_names
list_var_check
var_name_check
var_names = c("fish_num_per_tank", "tank_num_per_trt", "treatments_hr", "logHR_sd_intertank", "sampling_specs")
for (var_name_check in var_names) {
if(is.list(get(var_name_check, envir = environment())) & !is.data.frame(get(var_name_check, envir = environment()))){
list_var_check = c(list_var_check, get(var_name_check, envir = environment()))
}
}
list_var_check
#Initialize objects to store second output type (across list elements and loops)
output2 = list(surv_plots = list(), simul_surv_db = data.frame(), population_surv_db = data.frame())
list_var_check = list()
#Finding the input variable (var_name) that is a list and store info in var_list
var_names = c("fish_num_per_tank", "tank_num_per_trt", "treatments_hr", "logHR_sd_intertank", "sampling_specs")
for (var_name_check in var_names) {
if(is.list(get(var_name_check, envir = environment())) & !is.data.frame(get(var_name_check, envir = environment()))){
list_var_check = c(list_var_check, get(var_name_check, envir = environment()))
}
}
list_var_check
sampling_specs
sampling_specs = list(data.frame(TTE = c(20, 30),
Amount = c(10, 10),
Trt.ID = c("Control", "A")),
data.frame(TTE = c(40, 50),
Amount = c(10, 10),
Trt.ID = c("Control", "A")))
#Initialize objects to store second output type (across list elements and loops)
output2 = list(surv_plots = list(), simul_surv_db = data.frame(), population_surv_db = data.frame())
list_var_check = list()
#Finding the input variable (var_name) that is a list and store info in var_list
var_names = c("fish_num_per_tank", "tank_num_per_trt", "treatments_hr", "logHR_sd_intertank", "sampling_specs")
for (var_name_check in var_names) {
if(is.list(get(var_name_check, envir = environment())) & !is.data.frame(get(var_name_check, envir = environment()))){
list_var_check = c(list_var_check, get(var_name_check, envir = environment()))
}
}
fish_num_per_tank = list(70, 50)
#Initialize objects to store second output type (across list elements and loops)
output2 = list(surv_plots = list(), simul_surv_db = data.frame(), population_surv_db = data.frame())
list_var_check = list()
#Finding the input variable (var_name) that is a list and store info in var_list
#First we stop the function if we find more than 1 list
var_names = c("fish_num_per_tank", "tank_num_per_trt", "treatments_hr", "logHR_sd_intertank", "sampling_specs")
for (var_name_check in var_names) {
if(is.list(get(var_name_check, envir = environment())) & !is.data.frame(get(var_name_check, envir = environment()))){
list_var_check = c(list_var_check, get(var_name_check, envir = environment()))
}
}
list_var_check
length(list_var_check)
#Initialize objects to store second output type (across list elements and loops)
output2 = list(surv_plots = list(), simul_surv_db = data.frame(), population_surv_db = data.frame())
list_var_check = list()
#Finding the input variable (var_name) that is a list and store info in var_list
#First we stop the function if we find more than 1 list
var_names = c("fish_num_per_tank", "tank_num_per_trt", "treatments_hr", "logHR_sd_intertank", "sampling_specs")
for (var_name_check in var_names) {
if(is.list(get(var_name_check, envir = environment())) & !is.data.frame(get(var_name_check, envir = environment()))){
list_var_check = c(list_var_check, var_name_check)
}
}
list_var_check
length(list_var_check)
#Initialize objects to store second output type (across list elements and loops)
output2 = list(surv_plots = list(), simul_surv_db = data.frame(), population_surv_db = data.frame())
list_var_check = c()
#Finding the input variable (var_name) that is a list and store info in var_list
#First we stop the function if we find more than 1 list
var_names = c("fish_num_per_tank", "tank_num_per_trt", "treatments_hr", "logHR_sd_intertank", "sampling_specs")
for (var_name_check in var_names) {
if(is.list(get(var_name_check, envir = environment())) & !is.data.frame(get(var_name_check, envir = environment()))){
list_var_check = c(list_var_check, var_name_check)
}
}
length(list_var_check)
?stop()
#First we stop the function if we find more than 1 list
var_names = c("fish_num_per_tank", "tank_num_per_trt", "treatments_hr", "logHR_sd_intertank", "sampling_specs")
for (var_name_check in var_names) {
if(is.list(get(var_name_check, envir = environment())) & !is.data.frame(get(var_name_check, envir = environment()))){
list_var_check = c(list_var_check, var_name_check)
}
}
if(length(list_var_check) > 1) {stop("You specified more than 1 argument as list. Currently, this is not allowed")}
detach("package:safuncs", unload = TRUE)
library(safuncs)
detach("package:safuncs", unload = TRUE)
pkgdown::build_site()
#output = Surv_Simul2()
safuncs::Surv_Simul(haz_db = ref_haz_route_safuncs,
fish_num_per_tank = c(50, 100, 100), #for Ctrl., Trt.A, B, respectively
tank_num_per_trt = c(1, 1, 2),       #Ctrl., A, B
treatments_hr = c(1, 0.8, 0.5),      #Ctrl., A, B
sampling_specs = data.frame(TTE = c(30, 30, 30),
Amount = c(0, 20, 5),
Trt.ID = c("Control", "A", "B")),
n_sim = 4)$surv_plots
#output = Surv_Simul2()
safuncs::Surv_Simul(haz_db = haz_db_ex,
fish_num_per_tank = c(50, 100, 100), #for Ctrl., Trt.A, B, respectively
tank_num_per_trt = c(1, 1, 2),       #Ctrl., A, B
treatments_hr = c(1, 0.8, 0.5),      #Ctrl., A, B
sampling_specs = data.frame(TTE = c(30, 30, 30),
Amount = c(0, 20, 5),
Trt.ID = c("Control", "A", "B")),
n_sim = 4)$surv_plots
data(haz_db_ex)
#output = Surv_Simul2()
safuncs::Surv_Simul(haz_db = haz_db_ex,
fish_num_per_tank = c(50, 100, 100), #for Ctrl., Trt.A, B, respectively
tank_num_per_trt = c(1, 1, 2),       #Ctrl., A, B
treatments_hr = c(1, 0.8, 0.5),      #Ctrl., A, B
sampling_specs = data.frame(TTE = c(30, 30, 30),
Amount = c(0, 20, 5),
Trt.ID = c("Control", "A", "B")),
n_sim = 4)$surv_plots
#output = Surv_Simul2()
safuncs::Surv_Simul(haz_db = haz_db_ex,
fish_num_per_tank = c(50, 100, 100), #for Ctrl., Trt.A, B, respectively
tank_num_per_trt = c(1, 1, 2),       #Ctrl., A, B
treatments_hr = c(1, 0.8, 0.5),      #Ctrl., A, B
sampling_specs = data.frame(TTE = c(20, 30, 50),
Amount = c(0, 20, 5),
Trt.ID = c("Control", "A", "B")),
n_sim = 4)$surv_plots
#output = Surv_Simul2()
safuncs::Surv_Simul(haz_db = haz_db_ex,
fish_num_per_tank = c(50, 100, 100), #for Ctrl., Trt.A, B, respectively
tank_num_per_trt = c(1, 1, 2),       #Ctrl., A, B
treatments_hr = c(1, 0.8, 0.5),      #Ctrl., A, B
sampling_specs = data.frame(TTE = c(20, 30, 40),
Amount = c(5, 20, 5),
Trt.ID = c("Control", "A", "B")),
n_sim = 4)$surv_plots
detach("package:safuncs", unload = TRUE)
pkgdown::build_site()
#output = Surv_Simul2()
safuncs::Surv_Simul(haz_db = haz_db_ex,
fish_num_per_tank = list(50, 200),
tank_num_per_trt = 3,
treatments_hr = c(1, 0.8),
n_sim = 20)$surv_plots
#output = Surv_Simul2()
safuncs::Surv_Simul(haz_db = haz_db_ex,
fish_num_per_tank = list(50, 200),
tank_num_per_trt = 3,
treatments_hr = c(1, 0.7),
n_sim = 20)$surv_plots
#output = Surv_Simul2()
safuncs::Surv_Simul(haz_db = haz_db_ex,
fish_num_per_tank = list(50, 200),
tank_num_per_trt = 3,
treatments_hr = c(1, 0.6),
n_sim = 20)$surv_plots
