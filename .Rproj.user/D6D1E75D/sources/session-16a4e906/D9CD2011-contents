---
title: "Running Surv_Pred"
output: html_document
date: "`r Sys.Date()`"
---
```{r}
# Starting from an example mortality database, we first generate the complete survivor
# data using Surv_Gen()
data(mort_db_ex)
surv_dat = Surv_Gen(mort_db = mort_db_ex,
                    starting_fish_count = 100,
                    last_tte = 54)

# Filter for the control group ("A") to get a reference hazard curve for simulations
surv_dat_A = surv_dat[surv_dat$Trt.ID == "A", ]

# Estimate the hazard curve of the control group and get the associated hazard
# dataframe using bshazard::bshazard() or safuncs::Surv_Plots()$Hazard_DB
ref_haz_route_bshazard = bshazard::bshazard(data = surv_dat_A,
                                            survival::Surv(TTE, Status) ~ Tank.ID,
                                            nbin = max(surv_dat_A$TTE),
                                            verbose = FALSE)
ref_haz_route_bshazard = data.frame(summary(ref_haz_route_bshazard)$HazardEstimates)

ref_haz_route_safuncs = safuncs::Surv_Plots(surv_db = surv_dat_A,
                                            data_out = TRUE)$Hazard_DB

# Simulate! Sampled 10 fish per tank at 45 DPC, but otherwise default conditions.
Surv_Simul(haz_db = ref_haz_route_safuncs,
           treatments_hr = c(1, 0.8, 0.5),
           sampling_specs = data.frame(Amount = 10,
                                       TTE = 45))$surv_plots

# Further, results of simulating multiple times are shown to better understand the
# chance that future samples accurately capture the truth/population. Specify n_sim!
Surv_Simul(haz_db = ref_haz_route_safuncs,
           treatments_hr = c(1, 0.8, 0.5),
           sampling_specs = data.frame(Amount = 10,
                                       TTE = 45),
           prog_show = FALSE, #hide simulation progress notes for cleaner output
           n_sim = 4)$surv_plots

# Surv_Simul() can handle even more complicated experimental designs. Below, I use
# different (across treatments) fish numbers per tank, tank numbers, and sampling
# designs.
Surv_Simul(haz_db = ref_haz_route_safuncs,
           fish_num_per_tank = c(50, 100, 100), #for Ctrl., Trt.A, B, respectively
           tank_num_per_trt = c(1, 1, 2),       #Ctrl., A, B
           treatments_hr = c(1, 0.8, 0.5),      #Ctrl., A, B
           sampling_specs = data.frame(TTE = c(20, 40, 50),
                                       Amount = c(0, 20, 5), #0 sample for Ctrl.
                                       Trt.ID = c("Control", "A", "B")),
           prog_show = FALSE,
           n_sim = 4)$surv_plots

# What if we want to compare power of the global log-rank test (shown in the plot)
# across different experimental setups with different fish numbers per treatment?
# Below, I setup a Surv_Simul() to answer this question.
Surv_Simul(haz_db = haz_db_ex,
           fish_num_per_tank = list(30, 100),
           tank_num_per_trt = 3,
           treatments_hr = c(1, 0.6),
           prog_show = FALSE,
           n_sim = 30)$surv_plots

# Plot[[1]] and [[2]] shows the results from fish_num_per_tank = 30 and 100,
# respectively. Additionally, the simulated data output (...$surv_simul_db) can be
# supplied to safuncs::Surv_Power() (under development) to calculate power for
# various tests (e.g. log-rank global, pairwise with(out) correction) or tests based
# on statistical models with various forms (e.g. with(out) tank-variation)).
```


```{r}
data(mort_db_ex)
surv_dat = Surv_Gen(mort_db = mort_db_ex,
                    starting_fish_count = 100,
                    last_tte = 54)

# Create plot by feeding surv_dat to Surv_Plots()!
Surv_Plots(surv_db = surv_dat,
           plot_prefix = "QCATC777",
           xlab = "TTE",
           plot = "both",
           dailybin = FALSE,
           theme = "publication")

# If we want a plot for each tank, we can specify "Tank.ID" in the factor argument:
Surv_Plots(surv_db = surv_dat,
           factor = "Tank.ID * Trt.ID",
           plot_prefix = "QCATC777",
           xlab = "TTE",
           plot = "surv",
           dailybin = FALSE,
           theme = "publication")

# Plot each tank faceted by Trt.ID by changing "*" into "|" in the factor argument:
Surv_Plots(surv_db = surv_dat,
           factor = "Tank.ID | Trt.ID",
           plot_prefix = "QCATC777",
           xlab = "TTE",
           plot = "surv",
           dailybin = FALSE,
           theme = "publication")

# Tank specific hazard curves can also be created. The paramater phi often has to be
# specified for accurate estimation of the hazard curve of low sample size or single
# tank data. A phi between 1 to 2 is recommended based on estimates from past data
# with larger sample sizes. More info on estimation parameters can be found in the
# Details and Arguments section of the Surv_Plot() documentation.
Surv_Plots(surv_db = surv_dat,
           factor = "Tank.ID | Trt.ID",
           plot_prefix = "QCATC777",
           phi = 1.5,
           xlab = "TTE",
           xbreaks = 10,
           plot = "haz",
           dailybin = FALSE,
           theme = "publication")
```


```{r}
Surv_Plots = function(surv_db,
                      factor = "Trt.ID",
                      xlim = NULL,
                      xbreaks = NULL,
                      xlab = "Days Post Challenge",
                      ylim = c(0, 1.03),
                      lambda = NULL,
                      phi = NULL,
                      dailybin = TRUE,
                      plot = "both",
                      colours = NULL,
                      theme = "ggplot",
                      data_out = FALSE,
                      plot_save = TRUE,
                      plot_prefix = "ONDA_XX",
                      plot_dim = c(6, 4)) {

  if(is.null(xlim)) {xlim <- c(0, max(surv_db$TTE) + max(1, round(max(surv_db$TTE) / 50)))}
  if(is.null(xbreaks)) {xbreaks <- max(1, round((xlim[2] - xlim[1]) / 10))}
  
  #Address factors
  factors_vec = factor
  facet_by = NULL
  if(grepl("\\|", factor)) {
    factors_vec = strsplit(x = factor, split = "\\|") %>% unlist() %>% gsub(pattern = " ", replacement = "")
    facet_by = factors_vec[2]
  }
  if(grepl("\\*", factor)) {
    factors_vec = strsplit(x = factor, split = "\\*") %>% unlist() %>% gsub(pattern = " ", replacement = "")
  }

  if(plot == "surv" | plot == "both") {

    #Create survfit object
    surv_obj = survminer::surv_fit(as.formula(paste(c("survival::Surv(TTE, Status) ~", factors_vec), collapse = " + ")),
                                   data = surv_db)

    #Dealing with one Trt.ID scenario
    if(length(levels(as.factor(surv_db$Trt.ID))) == 1) {
      strn = unique(surv_db$Trt.ID)
    } else {

      #Add strata names
      strn = attributes(surv_obj$strata)$names
      if(length(factors_vec) == 1){
        strn = sub(".*=", "", strn)
      } 
      if(grepl("\\|", factor)) {
        strn = unique(gsub(".*=(.*),.*=(.*)", "\\1", strn))
      }
      if(grepl("\\*", factor)) {
        strn = gsub(".*=(.*),.*=(.*)", "\\1, \\2", strn)
      }
      strn = sub("\\s+$", "", strn)
    }
    
    #Create survival plot
    surv_plot = survminer::ggsurvplot(surv_obj,
                                      conf.int = FALSE,
                                      ggtheme = theme(plot.background = element_rect(fill = "white")),
                                      surv.scale = "percent",
                                      xlim = xlim,
                                      ylim = ylim,
                                      facet.by = facet_by,
                                      short.panel.labs = TRUE,
                                      short.legend.labs = TRUE)
    if("plot" %in% names(surv_plot)){surv_plot <- surv_plot$plot}
    
    if(is.null(colours)) {color_vec <- unique(layer_data(surv_plot)[,1])} else {color_vec <- colours}
    surv_plot$scales$scales = list()
    surv_plot = surv_plot +
      guides(color = guide_legend(paste(setdiff(factors_vec, facet_by), collapse = " & "))) +
      theme(legend.position = "right") +
      scale_x_continuous(breaks = seq(0, xlim[2] * 2, xbreaks), name = xlab, limits = xlim, oob = scales::squish,
                         expand = expansion()) +
      scale_y_continuous(labels = scales::percent, limits = ylim, n.breaks = 10, expand = expansion()) +
      scale_color_manual(labels = strn, values = color_vec)

    #Create survdat
    surv_dat = data.frame(Group = surv_plot$data$strata,
                          Survprob = surv_plot$data$surv,
                          Time = surv_plot$data$time)

    #Address names
    if(length(factors_vec) == 2){
      surv_dat$Group = gsub(".*=(.*),.*=(.*)", "\\1, \\2", surv_dat$Group)
      surv_dat = tidyr::separate(data = surv_dat, col = "Group", sep = ", ", into = factors_vec)
      surv_dat[, -which(colnames(surv_dat) == "Group")]
    }

    #Add theme
    Survival_Plot = surv_plot
    if(theme == "prism") {Survival_Plot <- Survival_Plot + ggprism::theme_prism()}
    if(theme == "publication") {Survival_Plot <- Survival_Plot + safuncs::theme_Publication()}

    #Save Plots
    if(plot_save == TRUE){
      ggsave(paste(plot_prefix, "Survival Curve.tiff", sep = "-"), dpi = 300,
             width = plot_dim[1], height = plot_dim[2], plot = Survival_Plot)
      eoffice::topptx(figure = Survival_Plot, width = plot_dim[1], height = plot_dim[2],
                      filename = paste(plot_prefix, "Survival Curve.pptx", sep = "-"))
    }
  }

  #Dealing with hazard curve creation
  if(dailybin == TRUE) {dbin <- max(surv_db$TTE)}
  if(dailybin == FALSE) {dbin <- NULL}

  #create Haz_list
  if(plot == "haz" | plot == "both") {
    Haz_list = list()

    surv_db$group = factor(interaction(surv_db[, factors_vec], sep = ", "))
    Haz_Group_Vec = unique(surv_db$group)

    #Create haz curve for each group
    for(Haz_Group in Haz_Group_Vec) {

      #Filter data for a group
      surv_db_group = droplevels(surv_db[surv_db$group == Haz_Group,])

      #Address no mort situations
      if(sum(surv_db_group$Status) == 0){
        Haz_list[[Haz_Group]] = data.frame(Hazard = 0,
                                           Time = rep(0, max(surv_db$TTE), 1))
      } else { #Create haz curves
        if(length(levels(as.factor(surv_db_group$Tank.ID))) > 1) {iv <- "Tank.ID"} else {iv <- 1} #address one tank situations
        sink() %>% suppressWarnings()
        Haz_bs = bshazard::bshazard(nbin = dbin,
                                     data = surv_db_group,
                                     formula = as.formula(paste("survival::Surv(TTE, Status) ~", iv)),
                                     verbose = FALSE,
                                     lambda = lambda,
                                     phi = phi) %>% safuncs::silencer()
        Haz_list[[Haz_Group]] = data.frame(Hazard = Haz_bs$hazard,
                                           Time = Haz_bs$time)
      }
    }

    #Create hazard database
    haz_db = dplyr::bind_rows(Haz_list, .id = paste(factors_vec, collapse = ", "))
    if(length(factors_vec) == 2){haz_db <- tidyr::separate(data = haz_db, col = 1, into = factors_vec, sep = ", ", remove = FALSE)}

    #Preserve levels from surv_db
    if(length(factors_vec) == 1){
      haz_db[, factors_vec] = factor(haz_db[, factors_vec], levels = levels(factor(surv_db[, factors_vec])))
    } else {
      haz_db[, factors_vec[1]] = factor(haz_db[, factors_vec[1]], levels = levels(factor(surv_db[, factors_vec[1]])))
      haz_db[, factors_vec[2]] = factor(haz_db[, factors_vec[2]], levels = levels(factor(surv_db[, factors_vec[2]])))
    }
    
    #Create hazard plot
    factors_leg = setdiff(factors_vec, facet_by)
    Hazard_Plot = ggplot(data = haz_db,
                         aes(x = Time, y = Hazard, color = .data[[paste(factors_leg, collapse = ", ")]])) +
      geom_line(linewidth = 1) +
      geom_point() +
      scale_x_continuous(breaks = seq(0, xlim[2] + 100, xbreaks),
                         limits = xlim, name = xlab, expand = expansion()) +
      scale_y_continuous(n.breaks = 6, name = "Hazard", expand = expansion(0.01)) +
      coord_cartesian(clip = "off")
    
    if(!is.null(facet_by)) {Hazard_Plot <- Hazard_Plot + facet_wrap(as.formula(paste("~", facet_by)))}
    if(!is.null(colours)) {Hazard_Plot <- Hazard_Plot + scale_color_manual(values = colours)}
    if(theme == "prism") {Hazard_Plot <- Hazard_Plot + ggprism::theme_prism()}
    if(theme == "publication") {Hazard_Plot <- Hazard_Plot + safuncs::theme_Publication()}

    #Save plots
    if(plot_save == TRUE) {
      ggsave(paste(plot_prefix, "Hazard Curve.tiff", sep = "-"), dpi = 300,
             width = plot_dim[1], height = plot_dim[2], plot = Hazard_Plot)
      eoffice::topptx(figure = Hazard_Plot, filename = paste(plot_prefix, "Hazard Curve.pptx", sep = "-"),
                      width = plot_dim[1], height = plot_dim[2])
    }
  }

  #Print outputs
  if(data_out == TRUE) {
    if(plot == "surv") {return(list(Survival_Plot = Survival_Plot, Survival_DB = surv_dat))}
    if(plot == "haz") {return(list(Hazard_Plot = Hazard_Plot, Hazard_DB = haz_db))}
    if(plot == "both") {return(list(Survival_Plot = Survival_Plot, Survival_DB = surv_dat,
                                    Hazard_Plot = Hazard_Plot, Hazard_DB = haz_db))}
  } else {
    if(plot == "surv") {return(Survival_Plot = Survival_Plot)}
    if(plot == "haz") {return(Hazard_Plot = Hazard_Plot)}
    if(plot == "both") {return(list(Survival_Plot = Survival_Plot, Hazard_Plot = Hazard_Plot))}
  }
}
```



```{r}
data(mort_db_ex)

starting_fish_count_ex = data.frame(Trt.ID = rep(LETTERS[1:4], each = 3),
                                    Tank.ID = c("C2", "C9", "C14", "C6", "C1", "C11", "C3", "C15", "C12", "C4", "C8", "C5"),
                                    starting_fish_count = 70)

sc_db_ex = read.csv(file = "sc_db_ex.csv")

safuncs::Surv_Gen(mort_db = mort_db_ex,
         last_tte = 54,
         starting_fish_count = starting_fish_count_ex)
```

```{r}
#Read data
setwd("C:/Users/sean4/Downloads")
sc_db1111 = read.csv(file = "QCATC1111 Scores S5.csv")

#Compare groups (Trt&Tank)
sc_db1111$group = interaction(sc_db1111$Trt.ID, sc_db1111$Tank.ID, drop = TRUE, lex.order = TRUE, sep = "&")
table(sc_db1111$group, sc_db1111$Skin.Max)
table(sc_db1111$group, sc_db1111$Gill)

#Create relevant contingency table
select_tab = table(sc_db1111$Trt.ID, sc_db1111$Skin.Max)[c(2, 6), ]
select_tab

#Create probability matrix
prob_mat = select_tab / sum(select_tab)

#Set simulation parameters based on the probability matrix
simul_param = Con_Simul(probs = prob_mat, 
                        margin_fixed_Trt. = TRUE)

#Simulate future data and calculate power (% positives)
Con_Simul_PR(simul_param, 
             sample_sizes = c(60, 90, 120), 
             add_fisher_exact = TRUE)$plot + ggplot2::scale_x_continuous(breaks = seq(60, 120, 30))
```
```{r}
Con_Simul_Object = simul_param
add_fisher_exact = TRUE
add_ord = TRUE
sample_sizes = c(50, 100, 150)
n_sim = 1000
FPR = TRUE

 Params = Con_Simul_Object$params
  PR_DB = data.frame()
  if(is.null(sample_sizes)) {sample_sizes <- Params[1]}

  for(tot_count in as.vector(sample_sizes)) {

    P_Chisq1_Eff = c()
    P_Chisq1_Null = c()
    P_Ord_Eff = c()
    P_Ord_Null = c()
    P_Fish_Eff = c()
    P_Fish_Null = c()

    for(iter in 1:n_sim) {
      Sim_Tab_Eff = Con_Simul(total_count = tot_count,
                               n_lesion = Params[2],
                               n_Trt. = Params[3],
                               margin_fixed_Trt. = Params[4],
                               probs = Con_Simul_Object$probs,
                               verbose = FALSE)

      P_Chisq1_Eff = append(P_Chisq1_Eff, suppressWarnings(chisq.test(x = Sim_Tab_Eff)$p.value))
      if(add_ord == TRUE) {
        DB_Ord_Eff = as.data.frame(as.table(Sim_Tab_Eff))
        DB_Ord_Eff = data.frame(lapply(DB_Ord_Eff, rep, DB_Ord_Eff$Freq))
        DB_Ord_Eff$Lesion_Category = factor(DB_Ord_Eff$Lesion_Category, ordered = TRUE)
        Ord_Eff = ordinal::clm(data = DB_Ord_Eff, Lesion_Category ~ Trt.)
        Ord_Eff0 = ordinal::clm(data = DB_Ord_Eff, Lesion_Category ~ 1)
        P_Ord_Eff = append(P_Ord_Eff, anova(Ord_Eff, Ord_Eff0)$'Pr(>Chisq)'[2])
      }
      if(add_fisher_exact == TRUE) {
        P_Fish_Eff <- append(P_Fish_Eff, fisher.test(x = Sim_Tab_Eff, simulate.p.value = TRUE)$p.value)
      }
    }

    if(FPR == TRUE) {
      probs_null_mat = matrix(nrow = nrow(Con_Simul_Object$probs),
                              ncol = ncol(Con_Simul_Object$probs),
                              data = rep(Con_Simul_Object$probs[1,],
                                         each = nrow(Con_Simul_Object$probs)))
      probs_null_mat = probs_null_mat * rowSums(Con_Simul_Object$probs)
      probs_null_mat = probs_null_mat / sum(probs_null_mat)

      for(iter in 1:n_sim) {

        Sim_Tab_Null = Con_Simul(total_count = tot_count,
                                  n_lesion = Params[2],
                                  n_Trt. = Params[3],
                                  margin_fixed_Trt. = Params[4],
                                  probs = probs_null_mat,
                                  verbose = FALSE)


        P_Chisq1_Null = append(P_Chisq1_Null, suppressWarnings(chisq.test(x = Sim_Tab_Null)$p.value))
        if(add_ord == TRUE) {
          DB_Ord_Null = as.data.frame(as.table(Sim_Tab_Null))
          DB_Ord_Null = data.frame(lapply(DB_Ord_Null, rep, DB_Ord_Null$Freq))
          DB_Ord_Null$Lesion_Category = factor(DB_Ord_Null$Lesion_Category, ordered = TRUE)
          Ord_Null = ordinal::clm(data = DB_Ord_Null, Lesion_Category ~ Trt.)
          Ord_Null0 = ordinal::clm(data = DB_Ord_Null, Lesion_Category ~ 1)
          P_Ord_Null = append(P_Ord_Null, anova(Ord_Eff, Ord_Eff0)$'Pr(>Chisq)'[2])
        }
        if(add_fisher_exact == TRUE) {
          P_Fish_Null <- append(P_Fish_Null, fisher.test(x = Sim_Tab_Null, simulate.p.value = TRUE)$p.value)
        }
      }
    }

    PR_DB = rbind(PR_DB, data.frame(Total_count = tot_count,
                                    Power_Chisquare = sum(P_Chisq1_Eff < 0.05) / length(P_Chisq1_Eff),
                                    Power_OrdinalRegression = sum(P_Ord_Eff < 0.05) / length(P_Ord_Eff),
                                    Power_FishersExact = sum(P_Fish_Eff < 0.05) / length(P_Fish_Eff),
                                    FPR_Chisquare = sum(P_Chisq1_Null < 0.05) / length(P_Chisq1_Null),
                                    FPR_OrdinalRegression = sum(P_Ord_Null < 0.05) / length(P_Ord_Null),
                                    FPR_FishersExact = sum(P_Fish_Null < 0.05) / length(P_Fish_Null)))
  }

  PR_DB_stacked = data.frame(PR_DB$Total_count,
                             stack(x = PR_DB, select = c("Power_Chisquare", "Power_OrdinalRegression", "Power_FishersExact",
                                                         "FPR_Chisquare", "FPR_OrdinalRegression", "FPR_FishersExact")))
  PR_DB_stacked = na.omit(PR_DB_stacked)
  split_txt = strsplit(x = as.character(PR_DB_stacked$ind), split = "_")
  PR_DB_stacked$Statistical_Test = sapply(split_txt, '[', 2)
  PR_DB_stacked$Class = sapply(split_txt, '[', 1)
  PR_DB_stacked = PR_DB_stacked[,-3]
  colnames(PR_DB_stacked) <- c("Total_Count", "Percent_of_Significant_Results", "Statistical_Test", "Class")
  PR_DB_stacked$Percent_of_Significant_Results = 100 * PR_DB_stacked$Percent_of_Significant_Results

  #remove na columns
  PR_DB = PR_DB[, colSums(is.na(PR_DB)) < nrow(PR_DB)]

  plot1 = ggplot2::ggplot(data = PR_DB_stacked, ggplot2::aes(x = Total_Count, y = Percent_of_Significant_Results, color = Statistical_Test)) +
    ggplot2::geom_point() +
    ggplot2::geom_line() +
    ggplot2::facet_wrap(~ Class) +
    ggplot2::xlab("Total Counts in Contingency Table") +
    ggplot2::ylab("Percent of Significant Results (%)") +
    ggplot2::scale_y_continuous(breaks = seq(0, 100, 5), limits = c(0, 100)) +
    ggplot2::labs(color = "Statistical Test")

```

```{r}
exp1 = data.frame(lapply(sc_db1111, rep, sc_db1111$Skin.1))
exp2 = data.frame(lapply(sc_db1111, rep, sc_db1111$Skin.2))

exp1$SkinNum = 1
exp2$SkinNum = 2

exp_comb = data.frame(rbind(exp1, exp2))
exp_comb$SkinNum = factor(exp_comb$SkinNum, ordered = TRUE)

clm_mod = clm(SkinNum ~ Trt.ID, data = exp_comb[exp_comb$Trt.ID %in% c("A", "B", "F"),])
joint_tests(clm_mod)

clmm_mod = clmm(SkinNum ~ Trt.ID + (1|Fish.ID), data = exp_comb[exp_comb$Trt.ID %in% c("A", "B", "F"),])
joint_tests(clmm_mod) #Accounting for fish variation only

clmm_mod2 = clmm(SkinNum ~ Trt.ID + (1|Fish.ID) + (1|Tank.ID), 
                 data = exp_comb[exp_comb$Trt.ID %in% c("A", "B", "F"),])
joint_tests(clmm_mod2) #Accounting for tank variation
```



```{r}
excel_db = read_xlsx("QCATC1096-3 CRF11 Post Challenge Mortality Record.xlsx")

xlsx_row2coln = function(x) {
  x = data.frame(x)
  colnames(x) = x[1, ]
  x = x[-1, ]
  
  return(x)
}

excel_db2 = xlsx_row2coln(excel_db)

xlsx_trimrow = function(x, coli = 1) {
  colsel = x[, coli]
  x = x[!is.na(colsel), ]
  
  return(x)
}

excel_db3 = xlsx_trimrow(excel_row2colnames(excel_db))

str(excel_db3)
```

```{r}
library(safuncs)
library(dplyr)
library(ggplot2)
setwd("C:/Users/sean4/Downloads")

ref_surv_db = read.csv(file = "QCATC997 Mort.csv")
ref_surv_db2 = ref_surv_db[ref_surv_db$Trt.ID == "E",]
ref_surv_db2$TTE = ref_surv_db2$TTE - 3

pred_mort_DB = read.csv(file = "ONDA01166 Mort.csv")
pred_start_DB = read.csv(file = "ONDA01166 starting_fish_count.csv")

pred_DB = Surv_Gen(mort_db = pred_mort_DB,
                   starting_fish_count = pred_start_DB,
                   last_tte = 38)
```

```{r}
safuncs::Surv_Plots(surv_db = pred_DB,
           x_breaks = 4,
           dailybin = FALSE,
           plot_prefix = "ONDA01166",
           plot_bytank = FALSE,
           plot = "both",
           theme = "prism",
           plot_dim = c(7.2, 4.5),
           colours = c("#007200", "#BABA00", "#FF0000", "#00748E", "#690091", "#4F4F4F"))

# Surv_Plots(surv_db = pred_DB,
#            dailybin = FALSE,
#            plot_bytank = TRUE,
#            phi = 1.5,
#            plot_prefix = "ONDA01166")

a = summary(survival::survfit(survival::Surv(TTE, Status) ~ Tank.ID, data = pred_DB))
(1 - last(a$surv)) * 100

#best is 10,3,1
srs = c(0.213, 0.299, 0.267)
```

```{r}
Surv_Pred(surv_db = pred_DB,
          surv_db_ref = ref_surv_db2,
          pred_tte = 54,
          pred_method = "simple",
          plot_save = TRUE,
          plot_prefix = "ONDA01166")
```

```{r}
data(mort_db_ex)
surv_dat = Surv_Gen(mort_db = mort_db_ex,
                    starting_fish_count = 100,
                    last_tte = 54)

# Create plot by feeding surv_dat to Surv_Plots()!
Surv_Plots(surv_db = surv_dat,
           plot_prefix = "QCATC777",
           xlim = c(0, 56),
           ylim = c(0, 1),
           plot = "surv",
           dailybin = FALSE,
           theme = "publication",
           plot_bytank = TRUE)
```

