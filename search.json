[{"path":"https://sean4andrew.github.io/safuncs/articles/safuncs.html","id":"survival-analysis","dir":"Articles","previous_headings":"","what":"Survival Analysis","title":"Get Started!","text":"ONDA, survival data often available scientists initially form rows entries every mortality observed. data needs converted useful form analysis R Prism. function Surv_Gen() shortens data transformation step just one line code! , showcase use. Let us first examine raw survival data can get OneDrive mort excel file: 2nd-rightmost column named TTE indicates Time Event, e.g. days post challenge, last column Status indicates type event (1 = death, 0 = sampled-survived). Missing dataset rows representing surviving fish (Status = 0); needs present proper survival analysis.  Introducing Surv_Gen()! Obtain proper survival data simply inserting mort database Surv_Gen(). Provide time (TTE) indicating fish survived starting number fish used per tank. output data’s bottom 5 rows represent generated survivors (Status = 0). also get printout messages verification purposes: can also specify tank-specific starting fish numbers using dataframe input starting_fish_count! short R script shown, can quickly regenerate survival data whenever slight change mort database; perhaps day--day corrections. wanting use generated survival data prism, set argument output_prism = TRUE Surv_Gen() save prism-ready csv. working directory. want starting ending dates Prism output, input starting date argument output_prism_date, shown: complete survival data obtained, plots can easily generated using Surv_Plots()!  plots save automatically working directory .tiff power-point editable format (.pptx). Notably, Surv_Plots() accepts many arguments can influence hazard plot particular needs tailoring specific experiment. details arguments, please see functions’ documentation page. ############CONTINUED###########","code":"data(mort_db_ex) # load example data file head(mort_db_ex, n = 5) # view first 5 rows of data #>   Tank.ID Trt.ID TTE Status #> 1      C1      B   0      1 #> 2      C6      B   4      1 #> 3      C6      B   7      1 #> 4      C1      B  19      1 #> 5      C8      D  19      1 Surv_Gen(mort_db = mort_db_ex,          starting_fish_count = 100, # per tank          last_tte = 54) #>      Tank.ID Trt.ID TTE Status #> 1196      C8      D  54      0 #> 1197      C8      D  54      0 #> 1198      C8      D  54      0 #> 1199      C8      D  54      0 #> 1200      C8      D  54      0 #> [1] \"Your total number of tanks is: 12\" #> [1] \"Your total number of treatment groups is: 4\" #> [1] \"Your total number of fish in the output data is: 1200\" # reduce example data to simplify the demonstration mort_db_ex2 = mort_db_ex[mort_db_ex$Tank.ID %in% c(\"C01\", \"C02\", \"C03\"),]  # apply Surv_Gen()! Surv_Gen(mort_db = mort_db_ex2,          starting_fish_count = data.frame(Trt.ID = c(\"B\", \"A\", \"C\"), # a vector of treatment groups for the specified tanks                                           Tank.ID = c(\"C1\", \"C2\", \"C3\"), # a vector with ALL tanks in the study                                           starting_fish_count = c(100, 100, 50)), # a vector of fish numbers in same order as Tank.IDs          last_tte = 54) Surv_Gen(mort_db = mort_db_ex,          starting_fish_count = 100, # per tank          last_tte = 54,          output_prism = TRUE,          output_prism_date = \"08-Aug-2024\") data(surv_db_ex) # load example complete survival data  Surv_Plots(surv_db_ex, # plot the survival curve and hazard curve            dailybin = FALSE) # recommended argument for good (large) sample size datasets #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> $Survival_Plot #>  #> $Hazard_Plot"},{"path":"https://sean4andrew.github.io/safuncs/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sean Andrew. Maintainer.","code":""},{"path":"https://sean4andrew.github.io/safuncs/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Andrew S (2025). safuncs: Functions Preparation Analysis Biological Data. R package version 2.3.0, https://sean4andrew.github.io/safuncs/, https://github.com/sean4andrew/safuncs.","code":"@Manual{,   title = {safuncs: Functions for the Preparation and Analysis of Biological Data},   author = {Sean Andrew},   year = {2025},   note = {R package version 2.3.0, https://sean4andrew.github.io/safuncs/},   url = {https://github.com/sean4andrew/safuncs}, }"},{"path":"https://sean4andrew.github.io/safuncs/index.html","id":"safuncs","dir":"","previous_headings":"","what":"Functions for the Preparation and Analysis of Biological Data","title":"Functions for the Preparation and Analysis of Biological Data","text":"Functions simulate, predict, generate, plot biological data. Get started showcases core functions make analysis quicker easy. Reference lists functions example datasets documentation.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Con_Simul.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Contingency Table — Con_Simul","title":"Simulate Contingency Table — Con_Simul","text":"Simulate contingency table fish counts distributed across n lesion categories n treatment groups. Probability values generating counts cell (.e. factor level combination) can assigned using probs argument. function designed use power /false positive rate calculations; details, see Con_Simul_PR().","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Con_Simul.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Contingency Table — Con_Simul","text":"","code":"Con_Simul(   probs = \"equal\",   total_count = 750,   n_lesion = 3,   n_Trt. = 5,   margin_fixed_Trt. = FALSE,   verbose = TRUE )"},{"path":"https://sean4andrew.github.io/safuncs/reference/Con_Simul.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Contingency Table — Con_Simul","text":"probs Matrix probability values created using matrix(). row matrix represent treatment group column lesion category. probability values matrix sum 1. Default = equal probability across cells. total_count Total number counts contingency table. Defaults 750. n_lesion Number lesion categories. Ignored probs specified. Defaults 3. n_Trt. Number treatment groups. Ignored probs specified. Defaults 5. margin_fixed_Trt. Whether margins fixed per treatment group (.e. fixed number fish per treatment). Default = FALSE. See Details information marginals. verbose Whether print parameters probability matrix used. Default = TRUE.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Con_Simul.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Contingency Table — Con_Simul","text":"Returns list containing:","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Con_Simul.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Contingency Table — Con_Simul","text":"Counts simulated multinomial distribution using rmultinom(). Counts may assumed fixed total marginals (e.g. per treatment group) fixed total row column marginals. discussion types marginals contingency tables, refer : comments Arguments.","code":""},{"path":[]},{"path":"https://sean4andrew.github.io/safuncs/reference/Con_Simul.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Contingency Table — Con_Simul","text":"","code":"# Simulate table with uniform probabilities across cells Con_Simul(total_count = 750, n_lesion = 3, n_Trt. = 5) #> $sim_tab #>     Lesion_Category #> Trt.  1  2  3 #>    A 43 59 46 #>    B 48 60 49 #>    C 45 49 51 #>    D 44 50 45 #>    E 48 55 58 #>  #> $params #>       total_count          n_lesion            n_Trt. margin_fixed_Trt.  #>               750                 3                 5                 0  #>  #> $probs #>            [,1]       [,2]       [,3] #> [1,] 0.06666667 0.06666667 0.06666667 #> [2,] 0.06666667 0.06666667 0.06666667 #> [3,] 0.06666667 0.06666667 0.06666667 #> [4,] 0.06666667 0.06666667 0.06666667 #> [5,] 0.06666667 0.06666667 0.06666667 #>   # Simulate table with specified probabilities across cells Con_Simul(probs = matrix(nrow = 2, ncol = 3, c(1/6, 3/12, 1/6, 1/6, 1/6, 1/12))) #> $sim_tab #>     Lesion_Category #> Trt.   1   2   3 #>    A 127 117 112 #>    B 174 154  66 #>  #> $params #>       total_count          n_lesion            n_Trt. margin_fixed_Trt.  #>               750                 3                 2                 0  #>  #> $probs #>           [,1]      [,2]       [,3] #> [1,] 0.1666667 0.1666667 0.16666667 #> [2,] 0.2500000 0.1666667 0.08333333 #>"},{"path":"https://sean4andrew.github.io/safuncs/reference/Con_Simul_PR.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Positive Rates for Contingency Table — Con_Simul_PR","title":"Calculate Positive Rates for Contingency Table — Con_Simul_PR","text":"Computes statistical power optionally false positive rates tests applied contingency tables based simulations. Specify simulation process using Con_Simul(), serves input. Positive rates computed Chi-square test optionally Fisher's exact test Wald test applied ordinal regression model.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Con_Simul_PR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Positive Rates for Contingency Table — Con_Simul_PR","text":"","code":"Con_Simul_PR(   Con_Simul_Object = Con_Simul(),   add_fisher_exact = FALSE,   add_ord = FALSE,   sample_sizes = NULL,   n_sim = 1000,   FPR = TRUE )"},{"path":"https://sean4andrew.github.io/safuncs/reference/Con_Simul_PR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Positive Rates for Contingency Table — Con_Simul_PR","text":"Con_Simul_Object Output Con_Simul() argument verbose set TRUE. add_fisher_exact Whether compute positive rates Fisher's Exact test. May add >1 min calculation time. Defaults FALSE. add_ord Whether compute positive rates Wald test fitted ordinal regression model. May add >1 min calculation time. Defaults FALSE. sample_sizes vector sample sizes false positive rates calculated. sample size defined total number counts contingency table. Defaults total count received Con_Simul_Object. n_sim Number contingency tables simulated positive rate calculation. Defaults 1000. FPR Whether calculate false positive rate addition power. Defaults TRUE.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Con_Simul_PR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Positive Rates for Contingency Table — Con_Simul_PR","text":"Returns list containing:","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Con_Simul_PR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Positive Rates for Contingency Table — Con_Simul_PR","text":"Power defined percentage tests yielding positive results (p-value < 0.05) set contingency tables simulated based data-generating process probability matrix specified Con_Simul(). specified probability matrix represent parameters population desire detect significant effect sample. simulated contingency tables reflect sample outcomes specified population parameter. False Positive Rate defined percentage tests yielding positive results (p-value < 0.05) contingency tables simulated based probability matrix without treatment effect. odd ratios lesion scores treatment groups assumed control (first row probability matrix). P-values Chi-square test computed using stats::chisq.test() default parameters. P-values Fisher's exact test computed using stats::fisher.test() simulate.p.value set TRUE, alongside default parameters. P-values ordinal regression computed stats::anova() applied output ordinal::clm().","code":""},{"path":[]},{"path":"https://sean4andrew.github.io/safuncs/reference/Con_Simul_PR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Positive Rates for Contingency Table — Con_Simul_PR","text":"","code":"# Below I show how we can perform a simple power calculation using this tool. # Suppose I want to calculate power for Treatment B which halves the lesions in # category 2 and 3. I then specify the following probability matrix and feed it into # Con_Simul(): probs_mat = matrix(nrow = 2, ncol = 3, data = c(1/6, 1/3, 1/6, 1/12, 1/6, 1/12)) probs_mat #>           [,1]       [,2]       [,3] #> [1,] 0.1666667 0.16666667 0.16666667 #> [2,] 0.3333333 0.08333333 0.08333333  sim_tab = Con_Simul(probs_mat)  # Next, I feed the output of Con_Simul() into Con_Simul_PR(): Con_Simul_PR(sim_tab,              sample_sizes = c(50, 100, 150),              add_ord = TRUE,              add_fisher_exact = TRUE) #> $pos_rate #>    Total_Count Percent_of_Significant_Results  Statistical_Test Class #> 1           50                           54.3         Chisquare Power #> 2          100                           88.0         Chisquare Power #> 3          150                           96.8         Chisquare Power #> 4           50                           59.0 OrdinalRegression Power #> 5          100                           90.1 OrdinalRegression Power #> 6          150                           96.8 OrdinalRegression Power #> 7           50                           52.4      FishersExact Power #> 8          100                           87.1      FishersExact Power #> 9          150                           96.5      FishersExact Power #> 10          50                            6.6         Chisquare   FPR #> 11         100                            5.1         Chisquare   FPR #> 12         150                            5.4         Chisquare   FPR #> 13          50                            6.0 OrdinalRegression   FPR #> 14         100                            5.0 OrdinalRegression   FPR #> 15         150                            5.2 OrdinalRegression   FPR #> 16          50                            6.2      FishersExact   FPR #> 17         100                            5.2      FishersExact   FPR #> 18         150                            5.3      FishersExact   FPR #>  #> $eff_mat #>           [,1]       [,2]       [,3] #> [1,] 0.1666667 0.16666667 0.16666667 #> [2,] 0.3333333 0.08333333 0.08333333 #>  #> $null_mat #>           [,1]      [,2]      [,3] #> [1,] 0.1666667 0.1666667 0.1666667 #> [2,] 0.1666667 0.1666667 0.1666667 #>  #> $plot  #>  # Results: Power is ~55, 86, and 97% for the Chi-square test using total counts of # 50, 100, and 150, respectively.  # The same power for Chi-square test can be calculated using Cohen's omega (w) method # which is faster but has its own limitations; e.g. assumes one data generating # process for the contingency table (the no fixed marginals). library(pwr) pwr::pwr.chisq.test(w = ES.w2(probs_mat), df = 2, sig.level = 0.05, N = 100) #>  #>      Chi squared power calculation  #>  #>               w = 0.3333333 #>               N = 100 #>              df = 2 #>       sig.level = 0.05 #>           power = 0.8563144 #>  #> NOTE: N is the number of observations #>  # Results: Power is 85.6% for the Chi-square test at the total count of 100."},{"path":"https://sean4andrew.github.io/safuncs/reference/GG_Colour_Hue.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Default Colours by ggplot — GG_Colour_Hue","title":"Get Default Colours by ggplot — GG_Colour_Hue","text":"function useful ! Origin","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/GG_Colour_Hue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Default Colours by ggplot — GG_Colour_Hue","text":"","code":"GG_Colour_Hue(n)"},{"path":"https://sean4andrew.github.io/safuncs/reference/GG_Colour_Hue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Default Colours by ggplot — GG_Colour_Hue","text":"n Number colour groups","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/GG_Colour_Hue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Default Colours by ggplot — GG_Colour_Hue","text":"Returns vector representing default colour codes assigned group ggplot.","code":""},{"path":[]},{"path":"https://sean4andrew.github.io/safuncs/reference/GG_Colour_Hue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Default Colours by ggplot — GG_Colour_Hue","text":"","code":"# Get colour codes used for 6 categorical groups GG_Colour_Hue(6) #> [1] \"#F8766D\" \"#B79F00\" \"#00BA38\" \"#00BFC4\" \"#619CFF\" \"#F564E3\""},{"path":"https://sean4andrew.github.io/safuncs/reference/Label_Gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Texts for Labels — Label_Gen","title":"Generate Texts for Labels — Label_Gen","text":"Combines texts specified list. List contain multiple variables holds texts value vector format. combinations texts across variables computed. Output text (combinations) sorted order variables given list (default behavior) specified using sort_by argument. output combinations tabulated saved .csv working directory.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Label_Gen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Texts for Labels — Label_Gen","text":"","code":"Label_Gen(   input_list,   sort_by = NULL,   n_col = 6,   fill_by_row = TRUE,   save_name = NULL )"},{"path":"https://sean4andrew.github.io/safuncs/reference/Label_Gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Texts for Labels — Label_Gen","text":"input_list list named variables, containing one text/number(s). See Examples examples. sort_by value vector representing variable(s) sort output . variable, sorts according order text variable. multiple variables given, prioritizes sorting based order variables; leftmost = highest priority. Defaults NULL sorting based input_list orders. n_col number columns output table. match number columns label paper. Defaults 6. fill_by_row Whether combinations fill output table row (otherwise column). Defaults TRUE. save_name Name saved .csv. Defaults NULL file name \"Label_Gen\" today's date (YYYY-MM-DD).","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Label_Gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Texts for Labels — Label_Gen","text":".csv containing possible combinations. Additionally, printout describing .csv file name location. Another printout describing total number labels / combinations created.","code":""},{"path":[]},{"path":"https://sean4andrew.github.io/safuncs/reference/Label_Gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Texts for Labels — Label_Gen","text":"","code":"# Summarize the input variables in a list input_variables = list(Time = c(\"Baseline\", \"1wpv\"),                        Animal = c(\"Oysters\", \"Lobsters\"),                        Tissue = c(\"Meat\", \"Shell\", \"Water\", \"Head\"),                        Replic_num = 1:3)  # Run Label_Gen() using the input variables. Label_Gen(input_list = input_variables,           sort_by = c(\"Time\", \"Animal\", \"Tissue\"),           n_col = 6,           fill_by_row = TRUE,           save_name = NULL) #> [1] \"You have 48 total labels\" #> [1] \"File saved as Label_Gen 2025-03-08.csv in /home/runner/work/safuncs/safuncs/docs/reference\""},{"path":"https://sean4andrew.github.io/safuncs/reference/MultiVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze and Visualize Multivariate Data — MultiVar","title":"Analyze and Visualize Multivariate Data — MultiVar","text":"Expedite multivariate analysis gain comprehensive insights data PCA, LDA, MANOVA. Outputs include tables statistical results, PCA plots, Boxplots dependent variable. Plots can customized using pca_ boxplots_ prefixed arguments. Supports one- two-factor analyses. two-factor analyses, additional plots may created facets /pooling values across levels selected factor, chosen using arguments factors_pool factors_facet. default, saves results Word document, allows exports .pptx, .png, /R objects edits. tutorial generate various outputs MultiVar() available Examples.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/MultiVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze and Visualize Multivariate Data — MultiVar","text":"","code":"MultiVar(   multivar_db,   values_cols,   factors_cols,   factors_pool = c(\"col1\", \"col2\"),   factors_facet = \"none\",   pca_ellipse = c(\"confidence\"),   pca_facet_scales = \"fixed\",   pca_labels = NULL,   pca_shapes = FALSE,   pca_grid = TRUE,   missing_method = \"imputation\",   scale = TRUE,   center = TRUE,   boxplot_filled = TRUE,   boxplot_x_angle = NULL,   boxplot_x_wrap = NULL,   boxplot_x_lab = FALSE,   boxplot_x_text = TRUE,   boxplot_legend_pos = \"right\",   boxplot_points = TRUE,   boxplot_outliers = FALSE,   boxplot_letters = TRUE,   boxplot_var_sep = FALSE,   colours = NULL,   colours_theme = NULL,   plot_out_png = FALSE,   plot_out_pptx = FALSE,   plot_out_R = TRUE )"},{"path":"https://sean4andrew.github.io/safuncs/reference/MultiVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze and Visualize Multivariate Data — MultiVar","text":"multivar_db dataframe two types columns. first holds numeric values multivariate outcome variables, column containing one variable. second type holds categories (factor levels), column containing one factor. example dataframe can viewed running View(data(multivar_db_ex)) R console. values_cols numeric vector specifying order number columns containing outcome variables. factors_cols numeric vector specifying order number columns containing factors. Maximum two numbers (.e. factors). factors_pool character vector indicating factors levels pooled across additional plots. Choose combination \"col1\" \"col2\" refers first second column factors_cols. Defaults c(\"col1\", \"col2\"). boxplots, plots grouping chosen factor also generated. factors_facet character vector indicating factors levels faceted across additional plots. Choose combination \"col1\" \"col2\" refers first second column factors_cols. Defaults \"none\" creates additional plots. pca_ellipse character vector representing type ellipses draw PCA plots. Generates plot every specified type. Choose combination \"confidence\", \"distribution\", \"convexhull\", /\"none\". \"confidence\" draws ellipses representing 95 percent confidence interval center multivariate normal data (principal component scores); drawn using ggpubr::stat_conf_ellipse(). \"distribution\" represents ellipses expected cover 95 percent multivariate normal data; drawn using ggplot2::stat_ellipse() argument type = \"norm\". \"convexhull\" represents smallest convex polygon enclosing points; drawn using ggpubr::stat_chull(). plots without ellipses, include \"none\". Defaults c(\"confidence\"). pca_facet_scales string indicating whether x y axes pca plots held constant across facets variable. Options \"fixed\", \"free\", \"free_x\", \"free_y\" according ggplot2::facet_wrap(). Defaults \"fixed\". pca_labels character vector representing labels draw PCA plots. Choose combination \"ind\" /\"var\". \"ind\" represents individual point labels row number. \"var\" represents variable loadings drawn arrows; arrow length direction calculated factoextra::fviz_pca_biplot(). Defaults NULL (labels drawn). pca_shapes TRUE/FALSE indicating whether use different shapes factor level PCA plots. Defaults FALSE. Different shapes supported plots greater 6 factor levels. pca_grid Whether plot grid lines pca plots. Defaults TRUE. missing_method string representing method address missing values values_cols. Choose \"imputation\" \"na_omit\". \"imputation\" fills missing values values created (imputed) based correlation variables essentially; accomplished using missMDA::imputePCA() ncp parameter missMDA::estim_ncpPCA(). \"na_omit\" removes entire rows data least one NA value present. method may result significant loss data. Defaults \"imputation\". choice missing_method affect PCA, LDA, MANOVA results likely small degree missing values. impact boxplots ANOVAs. scale Whether scale variable values (SD = 1 variable) PCA LDA. common procedure z-score normalization values commonly precede PCA. recommended set FALSE, unless justified. Defaults TRUE. center Whether center variable values (mean = 0 variable) PCA LDA. common procedure z-score normalization values commonly precede PCA. recommended set FALSE, unless justified. Defaults TRUE. boxplot_filled Whether color insides boxplots points (.e. fill ). FALSE, boxplots points hollow colored borders using colour ggplot2::aes(), instead using fill. Defaults TRUE. boxplot_x_angle number describing degree tilt x-axis labels boxplots. Defaults NULL (horizontal labels). boxplot_x_wrap maximum number characters single line split space bar available . Defaults NULL (text wrapping). boxplot_x_lab Whether include title x-axis boxplots. Defaults FALSE. boxplot_x_text Whether include text x-axis boxplots. Defaults TRUE. boxplot_legend_pos string representing position legend boxplot. Options \"none\", \"bottom\", \"top\", \"left\", \"right\". Use \"none\" remove legend. Defaults \"right\". boxplot_points Whether include points boxplots. Defaults TRUE. boxplot_outliers Whether plot outliers boxplots. Useful points removed using boxplot_points = FALSE. Defaults FALSE. boxplot_letters Whether statistical classes, denoted different letters, displayed boxplots. Classes determined pairwise comparisons appropriate type. \"Faceted\" \"Grouped\" plots uses \"Conditional\" pairwise comparisons classes summarized corresponding table; \"Pooled\" plots uses \"Pooled\" comparisons; plots factor level combinations x-axis ticks uses \"Complete\" comparisons. Defaults TRUE. boxplot_var_sep Whether include boxplots made separately every variable. Defaults FALSE. colours named character vector specifying colors use different factor levels. E.g. factor levels \"\", \"B\", \"C\", colours vector may look like c('' = \"brown\", B = 'blue', C = '#f8e723'). Defaults NULL (default ggplot2 colours). colours_theme string representing color palette use plots. Options listed ggplot2::scale_colour_brewer() Palettes section. Defaults NULL. plot_out_png Whether save plots .png working directory. Defaults FALSE. plot_out_pptx Whether save plots editable forms .pptx working directory. Defaults FALSE. plot_out_R Whether output plots ggplot2 objects list R. Defaults TRUE.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/MultiVar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyze and Visualize Multivariate Data — MultiVar","text":"Returns Word document containing least following types results (given order): Multivariate Analyses: PC plot(s) illustrating separation () PC scores groups Correlation plot individual variables principal components Correlation table summarizing pearson correlation coefficients pairs variables principal components Contribution table summarizing contribution values variables principal components Contribution table summarizing contribution values variables major linear discriminants (.e. separation groups) MANOVA table summarizing statistical evidence effect factor(s) (Bonus) Univariate Analyses: Boxplot(s) comparing values individual variables across groups. ANOVA results table (Two-Factor One-Factor) Pairwise comparisons table","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/MultiVar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analyze and Visualize Multivariate Data — MultiVar","text":"Several functions published CRAN used MultiVar() various types statistical analyses: PCA Uses stats::prcomp(). Pre-PCA, outcome variables may scaled centered using scale center arguments, respectively. Missing values may imputed using missMDA::imputePCA() ncp parameter ncp = missMDA::estim_ncpPCA()$ncp. LDA Uses MASS::lda(). Pre-LDA, values may scaled, centered, missing values imputed, methods described PCA. MANOVA Uses stats::manova() subsequently car::Anova() argument type = 3 - relevant analyses two factors. Missing values may imputed method described PCA. default, stats::manova() omits rows missing values. achieve MultiVar(), set missing_method argument \"na_omit\". PERMANOVA Output available upon request. Uses RVAideMemoire::adonis.II() argument method = \"euclidean\". Missing values may imputed using method described PCA. default, RVAideMemoire::adonis.II() omits rows missing values. achieve MultiVar(), set missing_method argument \"na_omit\". ANOVA Uses stats::anova() subsequently car::Anova() argument type = 3 - relevant analyses two factors. Pairwise Comparisons Uses biotools::mvpaircomp() emmeans::emmeans() multivariate univariate comparisons, adjust = \"BH\". P-values adjusted using Benjamini Hochberg procedure control false Discovery Rate 5 percent.","code":""},{"path":[]},{"path":"https://sean4andrew.github.io/safuncs/reference/MultiVar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyze and Visualize Multivariate Data — MultiVar","text":"","code":"# Below is a brief tutorial to help you get various outputs from MultiVar()!  # Lets start simple, with the aim of creating a report for a one-factor dataset # called iris: data(iris)  # Data structure: head(iris, n = 5) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa  # We can see that columns #1 to #4 contain dependent variables, while column #5 holds # the factor. Simply feed this information into Multivar()! MultiVar(multivar_db = iris,          values_cols = 1:4,          factors_cols = 5,          plot_out_R = FALSE) # hide R output for now  # A report is now saved in your working directory, check it out! You can locate your # working directory using: getwd() #> [1] \"/home/runner/work/safuncs/safuncs/docs/reference\"  # Suppose you wanted a more equipped PCA plot. We can customize our plots using a # set of arguments indicated with the proper prefix; 'pca_' for PCA plots and # 'boxplots_' for Boxplots: MultiVar(multivar_db = iris,          values_cols = 1:4,          factors_cols = 5,          pca_ellipse = c(\"none\", \"confidence\", \"distribution\", \"convexhull\"),          pca_labels = c(\"var\"),          plot_out_R = TRUE)$pca$distribution #> $none  #>   # If you want to customize the plot beyond the capabilities of MultiVar(), save them # as editable forms in .pptx or manipulate them further in R: FacetVar_box = MultiVar(multivar_db = iris,                        values_cols = 1:4,                        factors_cols = 5,                        boxplot_x_angle = 45,                        plot_out_pptx = TRUE,                        plot_out_R = TRUE)$box$none$facetvariables  FacetVar_box + ggthemes::theme_tufte() # Use the thufte theme   ggplot2::ggsave(filename = \"FacetVar_box.tiff\",                 width = 5,                 height = 5,                 dpi = 600) # Save with desired plot dimensions and resolution  # MultiVar() can also handle missing values which are common in real life data. By # default it imputes (creates) missing values based on the correlational properties # between dependent variables (essentially). Alternatively, rows with missing values # can be omitted using missing_method = \"na_omit\". Below is a demo showing the use # of the imputation method. iris[1:25, 1] = NA # replace half of Setosa's Sepal.Length with NA  MultiVar(multivar_db = iris,          values_cols = 1:4,          factors_cols = 5,          missing_method = \"imputation\",          pca_ellipse = \"distribution\",          plot_out_R = TRUE)$pca$distribution #> $none  #>   # The plot is not clearly different than before which indicates the imputed values # substitute NAs effectively, without clear bias.  ## TWO FACTOR CASES # Real data often have two factors, and MultiVar() produces plots tailored to that. # At minimum, MultiVar() produces plots with the interaction between two factors as # x-axis labels or legend labels. This can lead to a lot of levels in the axis or # legends which look unsightly. Run the code below to see how this looks like! Below # I am using an example fish mucus dataset with one real factor (Treatment) and one # fake (Fruits). data(multivar_db_ex)  head(multivar_db_ex, n = 5) #>   Treatment Severity Stage Muscle.degen Muscle.regen Bacteria Re.epithelization #> 1         A        3     1            1            0        0                 0 #> 2         A        4     0            2            0        2                 0 #> 3         A        4     4            1            0        0                 2 #> 4         A        4     4            2            1        0                 2 #> 5         A        3     3            1            0        0                 2 #>   Mucous.Cell.Grades Fruits #> 1                  0 Orange #> 2                  0 Orange #> 3                  1 Orange #> 4                  3 Orange #> 5                  1  Apple  MultiVar(multivar_db = multivar_db_ex,          values_cols = 2:8,          factors_cols = c(1, 9),          factors_pool = \"none\",          factors_facet = \"none\",          plot_out_R = FALSE)  # Check out the report in your working directory!  # Additional plots can be created with facets or pooling of values across levels of a # factor. Below we explore the default parameters which consists of 'factors_pool = # c('col1', 'col2')' and its output: MultiVar(multivar_db = multivar_db_ex,          values_cols = 2:8,          factors_cols = c(1, 9),          factors_pool = c(\"col1\", \"col2\"),          plot_out_R = TRUE)$pca$confidence[c(\"pooled1\", \"pooled2\")] #> $pooled1  #>  #> $pooled2  #>   # The \"col1\" specification instructs MultiVar() to create a plot with pooling across # levels of the first factor specified in 'values_cols', while \"col2\" refers to the # second factor.  # Plots with facets can also be created. Below, we facet against levels of the second # factor (Fruits) which is considered as a nuisance factor in this case: MultiVar(multivar_db = multivar_db_ex,          values_cols = 2:8,          factors_cols = c(1, 9),          factors_pool = c(\"col1\", \"col2\"),          factors_facet = c(\"col2\"),          plot_out_R = TRUE)$pca$confidence[\"facet2\"] #> $facet2  #>   # Check your word document output and you will see that it contains facets and pooling # for both PCA and boxplots. End of tutorial. Hope it helps!"},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Survivor Data — Surv_Gen","title":"Generate Survivor Data — Surv_Gen","text":"Produces survival data includes rows every surviving fish based starting number fish mortality data. generate survivor data tanks absent input mortality dataframe, specify arguments tank_without_mort trt_without_mort. generate survivor data tank specific starting numbers fish, input dataframe argument starting_fish_count instead single value; details Arguments.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Gen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Survivor Data — Surv_Gen","text":"","code":"Surv_Gen(   mort_db,   starting_fish_count,   last_tte,   add_factor = NULL,   add_sampled = NULL,   tank_without_mort = NULL,   trt_without_mort = NULL,   output_prism = FALSE,   output_prism_date = NULL )"},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Survivor Data — Surv_Gen","text":"mort_db mort dataframe described Details. starting_fish_count Value representing starting number fish every tank. Alternatively, dataframe containing columns \"Trt.ID\", \"Tank.ID\", \"starting_fish_count\" allow different fish starting numbers per tank. last_tte Value representing time--event fish survived , assigned every row survivor data generated. add_factor string character vector representing name(s) column(s) mort_db carried generated survival data analysis (e.g. facet factor safuncs::Surv_Plots()). Defaults NULL. add_sampled dataframe containing column names \"sampled_per_tank\" \"sampled_tte\" indicate amounts times sampled. row dataframe correlated (.e. specific time specific sampling per tank). Defaults NULL. tank_without_mort vector strings specifying tanks absent mort_db; used generate survivor data tanks. Argument ignored starting_fish_count dataframe. trt_without_mort vector strings corresponding tank_without_mort. Keep order . Argument ignored starting_fish_count dataframe. output_prism Whether generate save prism ready survival csv. Defaults FALSE. output_prism_date starting date used prism file. Please specify date \"dd-Mmm-yyyy\" syntax (e.g. \"08-Aug-2024\").","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Survivor Data — Surv_Gen","text":"dataframe produced combining input mort data generated rows survivor data.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Gen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Survivor Data — Surv_Gen","text":"mort dataframe supplied input consist following 4 columns minimum: \"Trt.ID\" = Labels treatment groups study. \"Tank.ID\" = Labels tanks study (tank must unique label). \"TTE\" = Time Event. Event fish death sampled removed depending \"Status\". \"Status\" = Value indicating happened TTE. 1 dead fish, 0 sampled removed. row represent one fish. example dataframe, execute data(mort_db_ex) view.","code":""},{"path":[]},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Survivor Data — Surv_Gen","text":"","code":"# First, we load an example mortality database available from the safuncs package data(mort_db_ex)  # Next, we input this data into Surv_Gen() as well as the study details to generate # entries (rows) for survivors in the output - a \"complete\" dataframe for further # survival analysis and data visualization. Surv_Data_Output = Surv_Gen(mort_db = mort_db_ex,                             starting_fish_count = 100,                             last_tte = 54,                             tank_without_mort = c(\"C99\", \"C100\"),                             trt_without_mort = c(\"A\", \"B\")) #> [1] \"Your total number of tanks is: 14\" #> [1] \"Your total number of treatment groups is: 4\" #> [1] \"Your total number of fish in the output data is: 1400\"  # Below, the bottom 5 rows of the output is displayed to show the rows of survivor # data generated. tail(Surv_Data_Output, n = 5) #>      Tank.ID Trt.ID TTE Status #> 1396    C100      B  54      0 #> 1397    C100      B  54      0 #> 1398    C100      B  54      0 #> 1399    C100      B  54      0 #> 1400    C100      B  54      0  # Below is another example, this time showing how to specify tank-specific fish # numbers. First, create the database containing information on the starting fish # counts for the different tanks. You must include all tanks that are in your mort # database to get a proper output. For the example below, we will later trim down # the mort database to only 4 tanks for simplicity. Use these 3 column names: # starting_fish_count, Tank.ID and Trt.ID. count_db = data.frame(starting_fish_count = c(100, 100, 120, 120),                       Tank.ID = c(\"C1\", \"C6\", \"C5\", \"C8\"),                       Trt.ID = c(\"B\", \"B\", \"D\", \"D\"))  filtered_mort_db = mort_db_ex[mort_db_ex$Tank.ID %in% c(\"C1\", \"C6\", \"C5\", \"C8\"),]  # We then use 'count_db' as input to the argument 'starting_fish_count' in Surv_Gen(): Surv_Data_Output = Surv_Gen(mort_db = filtered_mort_db,                             starting_fish_count = count_db,                             last_tte = 54) #> [1] \"Your total number of tanks is: 4\" #> [1] \"Your total number of treatment groups is: 2\" #> [1] \"Your total number of fish in the output data is: 440\"  # Surv_Gen() is also able to generate data for sampled fish (Status = 0) at specified # TTEs, using the argument add_sampled: Surv_Data_Output = Surv_Gen(mort_db = filtered_mort_db,                             starting_fish_count = count_db,                             last_tte = 54,                             add_sampled = data.frame(sampled_per_tank = 5,                                                      sampled_tte = 30)) #> [1] \"Your total number of tanks is: 4\" #> [1] \"Your total number of treatment groups is: 2\" #> [1] \"Your total number of fish in the output data is: 440\""},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Survival Plots — Surv_Plots","title":"Generate Survival Plots — Surv_Plots","text":"Produces Kaplan-Meier Survival Plot /Hazard Time Plot survival data. plot contains multiple curves different groups. Plots saved automatically working directory .tiff .pptx.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Survival Plots — Surv_Plots","text":"","code":"Surv_Plots(   surv_db,   add_factor = NULL,   xlim = NULL,   xbreaks = NULL,   xlab = \"Days Post Challenge\",   ylim = c(0, 1),   lambda = NULL,   phi = NULL,   dailybin = TRUE,   plot = \"both\",   theme = \"ggplot\",   trt_colours = NULL,   trt_order = NULL,   data_out = FALSE,   plot_save = TRUE,   plot_prefix = \"ONDA_XX\",   plot_dim = c(6, 4) )"},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Survival Plots — Surv_Plots","text":"surv_db survival dataframe described Details. add_factor string representing name column surv_db use additional factor plot creation. generate plot every interaction additional factor \"Trt.ID\". xlim vector specifying plots x-axis lower upper limits, respectively. xbreaks number specifying interval every major tick x-axis. xlab string specifying plot x-axis label. Defaults \"Days Post Challenge\". ylim vector specifying Survival Plot y-axis lower upper limits, respectively. Defaults c(0, 1) indicates 0 100% Survival Probability, respectively. lambda Smoothing value hazard curve. Higher lambda produces greater smoothing. Defaults NULL bshazard::bshazard() uses provided survival data estimate lambda; NULL specification recommended large sample size situations usually occurs full-scale studies many mortalities tank-replication. low sample sizes, lambda estimate can unreliable. Choosing lambda 10 (anywhere 1-100) probably produces accurate hazard curve situations. place choosing lambda, choosing phi recommended; see . phi Dispersion parameter count model used hazard curve estimation. Defaults NULL bshazard() uses provided survival data estimate phi; NULL specification recommended large sample size situations. low sample sizes, phi estimate can unreliable. Choosing phi value 1 low sample sizes recommended. value 1 (close) seems estimated past Tenaci data (QCATC997; phi ~ 0.8-1.4) large sample sizes tank-replication. phi value 1 indicates set counts (deaths) time Poisson distribution, following different hazard rates along curve overdispersed (phi > 1). dailybin Whether set time bins daily (1 TTE) intervals. Refer bshazard() documentation understanding role bins hazard curve estimation. Please set TRUE low sample sizes set FALSE large sample sizes (often tank replication), although large sample sizes either TRUE FALSE produces similar results usually. Defaults TRUE. plot plot output. Use \"surv\" Kaplan-Meier Survival Curve, \"haz\" Hazard Curve, \"\" . Defaults \"\". theme string specifying graphics theme plots. Theme \"ggplot2\", \"prism\", \"publication\", currently available. Defaults \"ggplot2\". trt_colours Vector color codes different treatment groups plot. Defaults ggplot2 default palette. trt_order Vector representing order treatment groups plots. Defaults NULL alphabetical order used. data_out Whether print survival /hazard databases illustrated plots. Defaults FALSE. plot_save Whether save plots working directory. plot_prefix string specifying prefix filename saved plots. Defaults \"ONDA_XX\". plot_dim Vector representing dimensions (width, height) save plot .tiff .pptx.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Plots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Survival Plots — Surv_Plots","text":"Returns list containing Kaplan-Meier Survival Curve Hazard Curve plot = \"\". one plot calculated shown, set either plot = \"haz\" plot = \"surv\". data_out = TRUE, returns dataframes associated survival plots.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Plots.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Survival Plots — Surv_Plots","text":"survival dataset dataframe containing least 4 different columns: \"Trt.ID\" = Labels treatment groups study. \"Tank.ID\" = Labels tanks study (tank must unique label). \"TTE\" = Time Event. Event depends \"Status\". \"Status\" = Value indicating happened TTE. 1 dead fish, 0 survivors sampled removed. row represent one fish. example dataframe, execute data(surv_db_ex) view. details statistical methodology used bshazard::bshazard(), refer : . General concept: h(t) hazard function considered count model number deaths response variable. .e, death_count(t) = h(t) * P(t) P(t) number alive function time h(t) modeled time using basis splines. basis spline curvatures assumed normal distribution mean 0 (random effect). Based assumption, author found variance curvatures (.e. smoothness) equal -dispersion (phi) death counts related (divided) smoothness parameter (lambda). Phi lambda can estimated data specified user. Specification can helpful low sample size situations overdispersion (phi) estimates found unreliable clearly wrong (based understanding realistic estimates estimated past data adequate, large sample sizes).","code":""},{"path":[]},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Plots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Survival Plots — Surv_Plots","text":"","code":"# Starting from an example mortality database, we first generate the complete survivor # data using Surv_Gen() data(mort_db_ex) surv_dat = Surv_Gen(mort_db = mort_db_ex,                     starting_fish_count = 100,                     last_tte = 54) #> [1] \"Your total number of tanks is: 12\" #> [1] \"Your total number of treatment groups is: 4\" #> [1] \"Your total number of fish in the output data is: 1200\"  # Create plot by feeding surv_dat to Surv_Plots()! Surv_Plots(surv_db = surv_dat,            plot_prefix = \"QCATC777\",            xlab = \"TTE\",            plot = \"both\",            dailybin = FALSE,            theme = \"publication\") #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> $Survival_Plot  #>  #> $Hazard_Plot  #>   # If we want a plot for each tank, we can specify \"Tank.ID\" as an additional factor: Tank_Plot = Surv_Plots(surv_db = surv_dat,                        add_factor = \"Tank.ID\",                        plot_prefix = \"QCATC777\",                        xlab = \"TTE\",                        plot = \"surv\",                        dailybin = FALSE,                        theme = \"publication\") #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. Tank_Plot   # The plot can be modified like any ggplot2 object, for example, faceting by treatment: Tank_Plot + ggplot2::facet_wrap(~ Trt.ID)   # Tank specific hazard curves can also be created. The paramater phi often has to be # specified for accurate estimation of the hazard curve of low sample size or single # tank data. A phi between 1 to 2 is recommended based on estimates from past data # with larger sample sizes. More info on estimation parameters can be found in the # Details and Arguments section of the Surv_Plot() documentation. Surv_Plots(surv_db = surv_dat,            add_factor = \"Tank.ID\",            plot_prefix = \"QCATC777\",            phi = 1.5,            xlab = \"TTE\",            xbreaks = 10,            plot = \"haz\",            dailybin = FALSE,            theme = \"publication\") + ggplot2::facet_wrap(~ Trt.ID) #> Warning: Stop time must be > start time, NA created"},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Power.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Power for Survival Experiments — Surv_Power","title":"Calculate Power for Survival Experiments — Surv_Power","text":"Calculate power global /pairwise hypothesis tests survival data support range data structures different experimental designs. Power calculations can made account inter-tank variation using mixed cox proportional hazards model (set argument model = \"coxph_glmm\"). Additionally, power calculations can account multiplicity pairwise comparisons using pairwise_corr. Users can compare power across different experimental designs specifying list element Surv_Simul(). brief tutorial written Examples guide user use Surv_Power() calculate power various scenarios.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Power.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Power for Survival Experiments — Surv_Power","text":"","code":"Surv_Power(   simul_db = simul_db_ex,   global_test = \"logrank\",   model = NULL,   pairwise_test = \"logrank\",   pairwise_corr = c(\"none\", \"BH\"),   prog_show = TRUE,   data_out = TRUE,   plot_out = TRUE,   plot_lines = FALSE,   xlab = \"List Element #\",   xnames = NULL,   plot_save = TRUE )"},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Power.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Power for Survival Experiments — Surv_Power","text":"simul_db output Surv_Simul() includes survival dataframe simulated desired experimental design parameters. global_test character vector representing method(s) use global hypothesis testing significance treatment. Methods available : \"logrank\", \"wald\", \"score\", \"LRT\". \"logrank\" represents global logrank test significance. latter three methods standard global hypothesis testing methods models. available argument model specified (.e. NULL). \"wald\" represents Wald Chisquare Test assesses whether model parameters (log(hazard ratios)) jointly significantly different 0 (.e. HRs ≠ 1). Wald test can done various cox-proportional hazard models relevant studies (glm, glmm, gee). Due broad applicability, also producing practically p-value time compared model tests, \"wald\" recommended option three. \"score\" represents Lagrange multiplier Score test. 'LRT' represents likelihood ratio test. Defaults \"logrank\" now due ubiquity use. model character vector representing model(s) fit hypothesis testing. Models available : \"coxph_glm\" \"coxph_glmm\" (\"cox_gee\" may supported upon request, omitted reasons discussed ). \"coxph_glm\" represents standard cox proportional hazard model fitted using survival::coxph() Trt.ID fixed factor. \"coxph_glmm\" represents mixed cox proportional hazard model fitted using coxme::coxme() Trt.ID fixed factor Tank.ID random factor account inter-tank variation. Defaults NULL model fitted hypothesis testing. pairwise_test character vector representing method(s) used pairwise hypothesis tests. Use \"logrank\" calculate power logrank tests comparing different treatments. Use \"EMM\" calculate power using Estimated Marginal Means based model estimates ('coxph_glm' /'coxph_glmm'). Defaults \"logrank\". pairwise_corr character vector representing method(s) used adjust p-values multiplicity pairwise comparisons. clarification, affects power pairwise comparisons. Methods available : \"tukey\", \"holm\", \"hochberg\", \"hommel\", \"bonferroni\", \"BH\", \"\", \"none\". Details (yet finished), discuss common categories adjustment methods provided recommendation \"BH\". Defaults c(\"none\", \"BH\"). prog_show Whether display progress Surv_Power() printing number sample sets p-values calculated. Defaults TRUE. data_out Whether output dataframes containing power global /pairwise hypothesis tests. Defaults TRUE. plot_out Whether output plots illustrating power global /pairwise hypothesis tests. Defaults TRUE. plot_lines Whether plot lines connecting points hypothesis test plot output. Defaults TRUE. xlab string representing x-axis title. Defaults \"List Element #\". xnames character vector names x-axis labels. Defaults NULL names list element numbers Surv_Simul(). plot_save Whether save plots .tiff working directory. Defaults TRUE.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Power.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Power for Survival Experiments — Surv_Power","text":"Outputs list containing following four items depending input arguments: global_test ≠ NULL data_out = TRUE, outputs dataframe named power_glob_db containing power values calculated global hypothesis tests. dataframe consists six columns: global_test ≠ NULL plot_out = TRUE, plot showing power values global hypothesis test. Plot corresponds power_glob_db. pairwise_test ≠ NULL data_out = TRUE, outputs dataframe named power_pair_db containing power values pairwise hypothesis tests. dataframe consists eight columns: pairwise_test ≠ NULL plot_out = TRUE, plot showing power values across list elements. Plot corresponds power_pair_db.","code":""},{"path":[]},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Power.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Power for Survival Experiments — Surv_Power","text":"","code":"# Below is a tutorial on how to calculate power using Surv_Power(). The function # calculates power as a percentage of positive (p < 0.05) test conducted on simulated # datasets. Hence, the first step is simulating the data  # A past data is retrieved for simulating future datasets: data(haz_db_ex) haz_db_ex = haz_db_ex[haz_db_ex$Trt.ID == \"A\",] # filter for control fish head(haz_db_ex, n = 5) #>   Trt.ID       Hazard Time #> 1      A 1.098677e-10  0.5 #> 2      A 2.321493e-10  1.5 #> 3      A 4.905294e-10  2.5 #> 4      A 1.036484e-09  3.5 #> 5      A 2.190081e-09  4.5  # As may be clear from the above, we are using the past data's hazard curve properties. # NOTE: Whether the shape of the hazard curve repeats in the future study only matters # to the accuracy of the power calculation when the future study involves fish being # dropped (e.g. due to sampling).  # To begin simulating, input the past data to Surv_Simul() with the supposed future # experiment parameters: surv_sim_db_ex1 = Surv_Simul(haz_db = haz_db_ex,                             fish_num_per_tank = 100,                             tank_num_per_trt = 4,                             treatments_hr = c(1, 0.7, 0.5),                             logHR_sd_intertank = 0,                             n_sim = 500,                             prog_show = FALSE, #omit progress bar for cleaner output                             plot_out = FALSE) #omit plotting for efficiency/speed #> [1] \"Time elapsed: 00:00:02 (hh:mm:ss)\"  # Above, we simulated 500 datasets with each having 400 fish per treatment and three # treatments total with hazard ratios of 1, 0.7, and 0.5 relative to 'haz_db_ex.'  # Next, the simulated data can be supplied to Surv_Power() to calculate power. Below, # power is calculated for the logrank test: Surv_Power(simul_db = surv_sim_db_ex1,            global_test = \"logrank\",            pairwise_test = \"logrank\",            pairwise_corr = \"none\",            prog_show = FALSE,            data_out = FALSE) # remove data output for brevity #> [1] \"Time elapsed: 00:00:10 (hh:mm:ss)\" #> $power_global_plot  #>  #> $power_pairwise_plot  #>   # From the above, we can see that there is a high probability of detecting significance # of treatment using the global test. On the other hand, power to detect differences # between treatment B (HR = 0.7 relative to control) and C (HR = 0.5) is ~ 60%. # Notably, the presented power for pairwise comparisons uses unadjusted p-values.  # If there is a need to adjust p-values to provide a guarantee for, for example, the # false discovery rate, then supply the chosen FDR method(s) (e.g. \"BH\") to the # 'pairwise_corr' argument: Surv_Power(simul_db = surv_sim_db_ex1,            global_test = \"logrank\",            pairwise_test = \"logrank\",            pairwise_corr = c(\"none\", \"BH\"),            prog_show = FALSE,            data_out = FALSE) #> [1] \"Time elapsed: 00:00:15 (hh:mm:ss)\" #> $power_global_plot  #>  #> $power_pairwise_plot  #>   # By default, FDR adjustment methods \"control\" or limit the false discovery rate to 5%; # true FDR would be lower.  # If for some reason there is a need to control for family-wise error rate due to a # desire to conclude at the family-level (already achievable via global test), then p # values can be adjusted using FWER methods (e.g. \"bonferroni\", \"tukey\"). Notably, due # to the correlation between pairwise tests, the tukey method is possible and is more # powerful than bonferroni. The tukey option is available if a model is specified: Surv_Power(simul_db = surv_sim_db_ex1,            model = \"coxph_glm\",            global_test = c(\"logrank\", \"wald\"),            pairwise_test = c(\"logrank\", \"EMM\"),            pairwise_corr = c(\"none\", \"tukey\", \"bonferroni\"),            prog_show = FALSE,            data_out = FALSE) #> [1] \"NOTE: Tukey pairwise correction is not available for log-rank tests. No power value is returned for such a combination of test and correction.\" #> [1] \"Time elapsed: 00:01:07 (hh:mm:ss)\" #> $power_global_plot  #>  #> $power_pairwise_plot  #>   # Based on the pairwise plot above, it seems that the tukey method is only marginally # more powerful in this case compared to bonferroni. The model used above was the cox # proportional hazards model. The global test option \"wald\" corresponds to a wald # chi-square test of the significance of treatment as a model factor. The pairwise # test option \"EMM\" corresponds to treatment comparisons using model estimated # marginal means. Notably, the model methods appear to produced similar result to the # logrank test, at least in this example.  # More sophisticated models may be fitted to account for tank variation if any was # introduced in the simulation process as below: surv_sim_db_ex2 = Surv_Simul(haz_db = haz_db_ex,                              fish_num_per_tank = 100,                              tank_num_per_trt = 6,                              treatments_hr = c(1, 1, 0.7),                              logHR_sd_intertank = 0.2,                              n_sim = 500,                              prog_show = FALSE,                              plot_out = FALSE) #> [1] \"Time elapsed: 00:00:02 (hh:mm:ss)\"  # To calculate power considering the tank variation, we fit a mixed model (coxph_glmm): Surv_Power(simul_db = surv_sim_db_ex2,            model = \"coxph_glmm\",            global_test = c(\"logrank\", \"wald\"),            pairwise_test = c(\"logrank\", \"EMM\"),            pairwise_corr = c(\"none\"),            prog_show = FALSE,            data_out = FALSE) #> [1] \"Time elapsed: 00:01:11 (hh:mm:ss)\" #> $power_global_plot  #>  #> $power_pairwise_plot  #>   # The above results show a property of the test that accounted for tank variation; # it is weaker than the one that does not (logrank test) given the data has tank # variability. However, this is for a reason. If you look into the positive rate of # the test comparing Control vs Trt. B (where true HR = 1), it only slightly above 5% # for the mixed model (a real bias for reasons not discussed here). This result is # roughly consistent with the acclaimed alpha or false positive rate of 0.05. In # contrast, the false positive rate for logrank test is much higher at ~20%.  ## VARYING EXPERIMENTAL CONDITIONS # As a precautionary measure, it may be important to study power under various scenarios # (e.g. increasing or decreasing strength of pathogen challenge). To do this, specify # each scenario as separate elements of a list in an argument of Surv_Simul(): HR_vec = c(1, 0.7, 0.5) HR_list = list(1.5 * HR_vec, # strong challenge                1.0 * HR_vec, # medium challenge                0.5 * HR_vec) # weak challenge  surv_sim_db_ex3 = Surv_Simul(haz_db = haz_db_ex,                              fish_num_per_tank = 100,                              tank_num_per_trt = 4,                              treatments_hr = HR_list,                              logHR_sd_intertank = 0,                              n_sim = 500,                              prog_show = FALSE,                              plot_out = FALSE) #> [1] \"Time elapsed: 00:00:05 (hh:mm:ss)\"  # Next, calculate and compare power across scenarios: Surv_Power(simul_db = surv_sim_db_ex3,            global_test = \"logrank\",            pairwise_test = \"logrank\",            pairwise_corr = \"none\",            prog_show = FALSE,            data_out = FALSE,            xlab = \"Challenge Strength\",            xnames = c(\"Strong\", \"Medium\", \"Weak\")) #> [1] \"Time elapsed: 00:00:28 (hh:mm:ss)\" #> $power_global_plot  #>  #> $power_pairwise_plot  #>   # The results show that power for the strong challenge model is generally high. # However, for the weak challenge model, more sample size appears to be needed to # achieve 80% power for some pairwise comparisons. We can investigate at what sample # size would such power be achieved by specifying different sample sizes as separate # list elements in Surv_Simul(): fish_num_vec = seq(from = 50, to = 200, by = 30) fish_num_vec #> [1]  50  80 110 140 170 200  fish_num_list = as.list(fish_num_vec) # convert vector elements to list elements  # Simulate the different experimental conditions: surv_sim_db_ex4 = Surv_Simul(haz_db = haz_db_ex,                              fish_num_per_tank = fish_num_list,                              tank_num_per_trt = 4,                              treatments_hr = c(1, 0.7, 0.5) * 0.5,                              logHR_sd_intertank = 0,                              n_sim = 500,                              prog_show = FALSE,                              plot_out = FALSE) #> [1] \"Time elapsed: 00:00:13 (hh:mm:ss)\"  # Compare power across sample sizes: Surv_Power(simul_db = surv_sim_db_ex4,            global_test = \"logrank\",            pairwise_test = \"logrank\",            pairwise_corr = \"none\",            prog_show = FALSE,            data_out = FALSE,            xlab = \"Fish number per tank\",            xnames = fish_num_vec,            plot_lines = TRUE) #> [1] \"Time elapsed: 00:01:00 (hh:mm:ss)\" #> $power_global_plot  #>  #> $power_pairwise_plot  #>   # The results showed that even an increase in sample size (from 100 to 200) result in # only modest gains in power for comparisons B to C. Perhaps a possible future action # then is to ensure the challenge is medium to strong by having higher salinity for # example. The above examples show some possible use case of Surv_Power(), but other # cases can be simulated to understand power in various scenarios. I hope this tool # can help you calculate power for your specific needs!"},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict Future Survival — Surv_Pred","title":"Predict Future Survival — Surv_Pred","text":"Predict future survival based comparisons hazard ratios reference data. Produces tables summarizing predicted survival rate hazard ratios treatment. Additionally, produces Kaplan-Meier Survival Plots Hazard Time Curves comparing survival data (surv_db) reference (surv_db_ref). details outputs described Value methods Details.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict Future Survival — Surv_Pred","text":"","code":"Surv_Pred(   surv_db,   surv_db_ref,   pred_tte = NULL,   pred_method = \"simple\",   pred_dailybin = TRUE,   pred_phi = 1.5,   pred_lambda = NULL,   plot_save = TRUE,   plot_prefix = \"ONDA_XX\",   data_out = TRUE )"},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Pred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict Future Survival — Surv_Pred","text":"surv_db survival dataframe described Surv_Plots(), consisting four columns named TTE, Status, Trt.ID Tank.ID. Example: surv_db_ex generated using Surv_Gen(). surv_db_ref survival dataframe column names supplied surv_db. Must one Trt.ID represents reference used prediction. pred_tte numeric representing time event survival rate predicted. Defaults NULL maximum TTE observed surv_db_ref used. pred_method string representing method used predict survival rate. Options \"simple\" \"adaptive\". Methods discussed Details. Defaults \"simple\". pred_dailybin Argument ignored surv_db surv_db_ref contains multiple tanks. Whether use daily (1 TTE interval) time bins estimating hazard curves. Defaults TRUE. details Surv_Plots. pred_phi Argument ignored surv_db surv_db_ref contains multiple tanks. numeric indicating dispersion parameter used count model estimates reference hazard curve. Defaults 1.5. Set NULL data driven estimate. details Surv_Plots. pred_lambda Argument ignored surv_db surv_db_ref contains multiple tanks. numeric indicating smoothing parameter used estimating reference hazard curve. Ignored pred_phi NULL. Defaults NULL (data driven estimate). details Surv_Plots. plot_save Whether save plot outputs working directory. Defaults TRUE. plot_prefix string specifying prefix filename saved plots.  Defaults \"ONDA_XX\". data_out Whether output dataframes containing predicted survival rates hazard ratios.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict Future Survival — Surv_Pred","text":"output list consisting least four ggplot2 objects optionally two dataframes described . 'Comp_SR_Plot' 'Comp_HR_Plot' illustrate survival rates hazard rates (respectively) treatments surv_db surv_db_ref latter colored black. 'Pred_SR_Plot' 'Pred_HR_Plot' display history predictions survival rate hazard ratio (respectively) based utilized TTE. example, utilized TTE 30, means prediction blind data used TTEs . dashed lines indicate prediction TTE surv_db_ref offset +/- 2. show sensitivity discrepancies \"starting times\" (onset significant mortality) reference data interest. 'Pred_TTE' dataframe containing predicted survival rate (pred_SR) hazard ratio (pred_HR) based latest TTE, predictions using TTEs prior tabulated 'Pred_History'.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Pred.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict Future Survival — Surv_Pred","text":"Two prediction methods possible: \"simple\" \"adaptive\" can selected using pred_method. methods entail firstly, estimation hazard curve reference group using bshazard::bshazard(). Several parameters estimation can modified quality purposes. parameters pred_dailybin, pred_phi, pred_lambda discussed details documentation safuncs::Surv_Plots(). studies multiple tanks per treatment, estimation hazard curve uses data driven approach aforementioned parameters modified (ignored). methods estimate hazard ratio treatment surv_db. achieved fitting treatment (separately) reference group surv_db_ref cox proportional hazards model. model may fitted using survival::coxph() data single tanks per treatment coxme::coxme() data multiple tanks per treatment. \"simple\" method, estimated hazard ratio multiplied hazard curve produce predicted hazard curve. hazard curve cut pred_tte. curve's cumulative value calculated using DescTools::AUC(), turned negative exponentiated calculate survival rate pred_tte. \"simple\" method recommended \"adaptive\". \"adaptive\" method, predicted hazard curve cut range pred_tte, starting maximum TTE surv_db. cumulative hazard curve calculated using DescTools::AUC() added observed cumulative hazard surv_db. total cumulative hazard turned negative exponentiated calculate survival rate pred_tte. idea method use observed data surv_db accurate predictions, found often sensitive variations surv_db, hence recommended now.","code":""},{"path":[]},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Pred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict Future Survival — Surv_Pred","text":"","code":"# Below is a brief tutorial showing how to use Surv_Pred() to predict future survival.  # In the first step, we load the data for which survival is to be predicted and its # reference (e.g. a past survival data involving the same disease). The reference must # contain only one treatment group: surv_db_ref = surv_db_ex[surv_db_ex$Trt.ID == \"D\",]  # For demonstration purposes, we pretend the survival data to be predicted only extends # to 35 TTE / DPC. Survival rate at 54 TTE is to be predicted. To create such data from # the example, I use survival::survSplit(). For real applications, creating the data # this way would be unnecessary, instead refer to safuncs::Surv_Gen(). surv_db = survival::survSplit(data = surv_db_ex[-1,], cut = 35, end = \"TTE\",                               event = \"Status\", episode = \"Eps\")  surv_db = surv_db[surv_db$Eps == 1 & surv_db$Trt.ID != \"D\",                   -c(3, 6)] #remove unnecessary rows and columns  tail(surv_db, n = 5) #>      Tank.ID Trt.ID TTE Status #> 1736      C3      C  35      0 #> 1738      C3      C  35      0 #> 1740      C3      C  35      0 #> 1742      C3      C  35      0 #> 1744      C3      C  35      0  # Next, we feed both datasets to Surv_Pred() and execute! Surv_Pred(surv_db = surv_db,           surv_db_ref = surv_db_ref,           pred_tte = 54,           pred_method = \"simple\",           plot_save = FALSE,           data_out = FALSE)[-4] #exclude data output and fourth plot for now for brevity #> Warning: The desired 'pred_tte' (54) is greater than the maximum in the reference database (52) given the TTE offset of -2. For this offset, predictions are for 'pred_tte' -2 (i.e. TTE = 52). #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> $Comp_SR_Plot  #>  #> $Comp_HR_Plot  #>  #> $Pred_SR_Plot  #>   # In the first two comparative plots, colored lines show characteristics of treatments # from surv_db while black lines show represent the reference group.  # Notably, the third plot shows instability of the survival predictions. Using the # latest TTE, predictions compared to actual survival at 54 TTE is 76 vs 64% (+8%) for # Trt.A, 56 vs 64% (-8%) for Trt.B, and 70 vs 73% (-3%) for Trt.C. Notably, for Trt.B, # predictions took ~ 2 weeks to become close to accurate. A suspected cause of this is # the low(?) mortality counts that would led to an unreliable hazard ratio estimate # on which the survival prediction is based on. Due to sampling variability, early # predictions should be scrutinized.  # I want to show another example where the predictions worked \"better\". Below I use a # real ongoing study (at the time of writing). Here, predictions appeared more stable # and stabilized quicker. I attribute this partly to the greater mortality counts which # lead to more precisely estimated hazard ratios.  Surv_Pred(surv_db = surv_db_ex2, #real data with anonymized Trt.IDs           surv_db_ref = surv_db_ex3, #real past data as reference           pred_tte = 54,           pred_method = \"simple\",           plot_save = FALSE,           data_out = FALSE) #> Warning: The desired 'pred_tte' (54) is greater than the maximum in the reference database (52) given the TTE offset of -2. For this offset, predictions are for 'pred_tte' -2 (i.e. TTE = 52). #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one. #> $Comp_SR_Plot  #>  #> $Comp_HR_Plot  #>  #> $Pred_SR_Plot  #>  #> $Pred_HR_Plot  #>"},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Simul.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Survival Data — Surv_Simul","title":"Simulate Survival Data — Surv_Simul","text":"Simulates survival data based set user-specified experimental parameters reference hazard curve (e.g. hazard curve control group). Able simulate data inter-cluster (e.g. tank) variation added based framework mixed cox proportional hazards model (coxme::coxme). Able simulate right censored data (e.g. sampled fish) using sampling_specs argument. Able simulate treatment- tank- specific fish numbers. Optionally produces plot illustrating characteristics simulated data population / truth data (sample) simulated.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Simul.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Survival Data — Surv_Simul","text":"","code":"Surv_Simul(   haz_db,   fish_num_per_tank = 100,   tank_num_per_trt = 4,   treatments_hr = c(1, 1, 1, 1),   logHR_sd_intertank = 0,   sampling_specs = NULL,   exp_design = \"between-tank\",   n_sim = 1,   prog_show = TRUE,   plot_out = TRUE,   pop_out = TRUE,   theme = \"ggplot2\",   plot_save = TRUE )"},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Simul.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Survival Data — Surv_Simul","text":"haz_db dataframe representing reference hazard curve; can generated bshazard::bshazard() Surv_Plots(). fish_num_per_tank number fish simulate per tank, defaults 100. differs treatment, specify vector numbers ordered according treatments_hr. need compare experiments different setups (fish numbers), specify different setups elements list (see Examples). useful comparing power experimental setups (calculations see Surv_Power()). 1 input parameter Surv_Simul() can specified list. tank_num_per_trt number tanks simulate per treatment group, defaults 4. differs treatment, specify vector numbers ordered according treatments_hr. Input can specified elements list, element representing different experimental setups described fish_num_per_tank. treatments_hr vector representing hazard ratios treatment groups starting reference/control (HR = 1), defaults c(1, 1, 1, 1). Length vector represents number treatment groups. Input can specified elements list, element representing different experimental setups described fish_num_per_tank. logHR_sd_intertank standard deviation inter-tank variation (contributes overall data variation) log-HR scale according coxme framework. Defaults 0 (tank effect) quite oftenly, estimate injected Trojan fish data. reference 0.1 reflects low tank effect, 0.35 fairly high can occurred immersion challenged fish datasets. Input can specified elements list, element representing different experimental setups described fish_num_per_tank. sampling_specs dataframe containing least 2 columns; \"Amount\" representing number right censored data (e.g. sampled fish) per tank; \"TTE\" representing time sampling occurred; optionally \"Trt.ID\" column account different sampling conditions per tank per treatment. Trt.IDs must start \"Control\", capitalized letters (see Examples). Defaults NULL (sampling). Input can specified elements list, element representing different experimental setups described fish_num_per_tank. exp_design string specifying type experimental design. Can \"-tank\" indicates tank unique treatment hence treatment effect occurs \"-tanks\". , \"within-tank\" tank contains fish exposed various treatments. n_sim Number survival dataset simulate. Defaults 1. serious power calculations, n_sim < 2000 likely ever need precise results. prog_show Whether display progress Surv_Simul() printing number simulations completed. Defaults TRUE. plot_out Whether output information plot (details Value). Defaults TRUE. pop_out Whether output dataframe containing survival probability values population. Defaults TRUE. theme string specifying graphics theme plots. Theme \"ggplot2\" \"prism\" currently available. Defaults \"ggplot2\". plot_save Whether save plot .tiff working directory. Defaults TRUE.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Simul.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Survival Data — Surv_Simul","text":"Returns list , minimum, contains simulated survival dataframe (surv_simul_db) least 5 columns: TTE (Time Event), Status (0 / 1), Trt.ID, Tank.ID, n_sim represents simulation number data subsets. Additionally, can contain column named \"list_element_num\" represents list element number input argument Surv_Simul() specified list. plot_out = TRUE, list includes Kaplan-Meier survival plots. left faceted plot represents survival curves simulated sample set, right represents population/truth. Numbers end survival curves represent end survival rate treatment. number simulated sample sets exceed 1, multiple survival curves drawn representing sample set. cases, statement also provided informing probability detect effect Treatment using global logrank test survival::survdiff(), .e. power false positive rate. pop_out = TRUE, list includes dataframe (surv_pop_db) representing survival rates (probabilities) population / truth sample simulated. dataframe contains three columns: Trt.ID, surv_prob represents survival probabilities, TTE.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Simul.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Survival Data — Surv_Simul","text":"Simulations based uniform-probability draws (U ~ (0, 1)) set events can expressed function time using cumulative density function failures (F(t), .e. cumulative mort. curve). cumulative mort curve (F(t)) can expressed terms cumulative hazard function H(t), relationship H(t) U draws known (derivation equation, see Bender et al. (2003). H(t) related (integral) hazard function h(t), since h(t) related effects (e.g. treatment tank) based cox proportional hazards model, effects can now incorporated simulation process interact U. simulation process follows: Surv_Simul() takes random sample U (e.g. 0.7). U transformed H related discussed. equation relating U, H, treatment effects shown (obtain Bender et al. 2003 also shows derivation equation): H = -log(U) ⋅ exp(-log(β)); β representing treatment tank effects. function H(t) inverse (known supplied reference hazard curve) applied H obtain t (time event) represents survival data. Data t beyond last follow-period represent survivors (Status set 0), , represents mortalities (Status set 1). verify correct \"randomness\" produced simulated survival data, given adding \"randomness\" whole point simulations (), 5 different validation checks performed (documented pdf uploaded github). checks showed HR estimated fitting two curves sampled population, converges mean 1 () many simulations, across simulations HR varies expected (SD simulated HRs = SE HR supposed cox model). checks also showed p-value obtained applying log-rank test null (-effect) simulated datasets, distribution uniform (), false positive rate 0.05 given alpha used 0.05 (). Additionally, power calculated simulations equal power calculated online calculator. Last, checks showed variations simulated survival curve similar observed curves simulated using different, limited, method (bootstraping / re-sampling replacement).","code":""},{"path":[]},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Simul.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Survival Data — Surv_Simul","text":"","code":"# Starting from an example mortality database, we first generate the complete survivor # data using Surv_Gen() data(mort_db_ex) surv_dat = Surv_Gen(mort_db = mort_db_ex,                     starting_fish_count = 100,                     last_tte = 54) #> [1] \"Your total number of tanks is: 12\" #> [1] \"Your total number of treatment groups is: 4\" #> [1] \"Your total number of fish in the output data is: 1200\"  # Filter for the control group (\"A\") to get a reference hazard curve for simulations surv_dat_A = surv_dat[surv_dat$Trt.ID == \"A\", ]  # Estimate the hazard curve of the control group and get the associated hazard # dataframe using bshazard::bshazard() or safuncs::Surv_Plots()$Hazard_DB ref_haz_route_bshazard = bshazard::bshazard(data = surv_dat_A,                                             survival::Surv(TTE, Status) ~ Tank.ID,                                             nbin = max(surv_dat_A$TTE),                                             verbose = FALSE) #> NOTE: entry.status has been set to 0 for all. ref_haz_route_bshazard = data.frame(summary(ref_haz_route_bshazard)$HazardEstimates)  ref_haz_route_safuncs = safuncs::Surv_Plots(surv_db = surv_dat_A,                                             data_out = TRUE)$Hazard_DB #> Coordinate system already present. Adding new coordinate system, which will #> replace the existing one.  # Simulate! Sampled 10 fish per tank at 45 DPC, but otherwise default conditions. Surv_Simul(haz_db = ref_haz_route_safuncs,            treatments_hr = c(1, 0.8, 0.5),            sampling_specs = data.frame(Amount = 10,                                        TTE = 45))$surv_plots #>  Simulated 1 of 1 sample sets #> [1] \"Time elapsed: 00:00:00 (hh:mm:ss)\"   # Further, results of simulating multiple times are shown to better understand the # chance that future samples accurately capture the truth/population. Specify n_sim! Surv_Simul(haz_db = ref_haz_route_safuncs,            treatments_hr = c(1, 0.8, 0.5),            sampling_specs = data.frame(Amount = 10,                                        TTE = 45),            prog_show = FALSE, #hide simulation progress notes for cleaner output            n_sim = 4)$surv_plots #> [1] \"Time elapsed: 00:00:00 (hh:mm:ss)\"   # Surv_Simul() can handle even more complicated experimental designs. Below, I use # different (across treatments) fish numbers per tank, tank numbers, and sampling # designs. Surv_Simul(haz_db = ref_haz_route_safuncs,            fish_num_per_tank = c(50, 100, 100), #for Ctrl., Trt.A, B, respectively            tank_num_per_trt = c(1, 1, 2),       #Ctrl., A, B            treatments_hr = c(1, 0.8, 0.5),      #Ctrl., A, B            sampling_specs = data.frame(TTE = c(20, 40, 50),                                        Amount = c(0, 20, 5), #0 sample for Ctrl.                                        Trt.ID = c(\"Control\", \"A\", \"B\")),            prog_show = FALSE,            n_sim = 4)$surv_plots #> [1] \"Time elapsed: 00:00:00 (hh:mm:ss)\"   # What if we want to compare power of the global log-rank test (shown in the plot) # across different experimental setups with different fish numbers per treatment? # Below, I setup a Surv_Simul() to answer this question. Surv_Simul(haz_db = haz_db_ex,            fish_num_per_tank = list(30, 100),            tank_num_per_trt = 3,            treatments_hr = c(1, 0.6),            prog_show = FALSE,            n_sim = 30)$surv_plots #> [1] \"Time elapsed: 00:00:01 (hh:mm:ss)\" #> [[1]]  #>  #> [[2]]  #>   # Plot[[1]] and [[2]] shows the results from fish_num_per_tank = 30 and 100, # respectively. Additionally, the simulated data output (...$surv_simul_db) can be # supplied to safuncs::Surv_Power() (under development) to calculate power for # various tests (e.g. log-rank global, pairwise with(out) correction) or tests based # on statistical models with various forms (e.g. with(out) tank-variation))."},{"path":"https://sean4andrew.github.io/safuncs/reference/haz_db_ex.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Hazard Data — haz_db_ex","title":"Example Hazard Data — haz_db_ex","text":"reference hazard dataframe created using Surv_Plots(..., dailybin = TRUE, data_out = TRUE)$Hazard_DB uses bshazard::bshazard() inside. Contains hazard rates time.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/haz_db_ex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Hazard Data — haz_db_ex","text":"","code":"data(haz_db_ex) View(haz_db_ex)"},{"path":"https://sean4andrew.github.io/safuncs/reference/haz_db_ex.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Hazard Data — haz_db_ex","text":"data frame containing 54 rows 3 columns:","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/mort_db_ex.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Mort Data — mort_db_ex","title":"Example Mort Data — mort_db_ex","text":"subset columns taken online excel mortality file OneDrive.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/mort_db_ex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Mort Data — mort_db_ex","text":"","code":"data(mort_db_ex) View(mort_db_ex)"},{"path":"https://sean4andrew.github.io/safuncs/reference/mort_db_ex.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Mort Data — mort_db_ex","text":"data frame containing 399 rows 4 columns:","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/multivar_db_ex.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Multivariate Data — multivar_db_ex","title":"Example Multivariate Data — multivar_db_ex","text":"example dataset representing mucus chemistry fish exposed different treatments. Mucus chemistry described several variables columns 2 8. column 9, fake factor \"Fruits\" added use example second factor. column 4, row 10, available value replaced NA use example missing value.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/multivar_db_ex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Multivariate Data — multivar_db_ex","text":"","code":"data(multivar_db_ex) View(multivar_db_ex)"},{"path":"https://sean4andrew.github.io/safuncs/reference/multivar_db_ex.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Multivariate Data — multivar_db_ex","text":"object class data.frame 48 rows 9 columns.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/onda_cols1.html","id":null,"dir":"Reference","previous_headings":"","what":"Primary ONDA Color Vector — onda_cols1","title":"Primary ONDA Color Vector — onda_cols1","text":"vector containing hex codes primary theme colors ONDA: c(\"#004750\", \"#006B68\", \"#65BBB0\").","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/onda_cols1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Primary ONDA Color Vector — onda_cols1","text":"","code":"data(onda_cols1) print(onda_cols1)"},{"path":"https://sean4andrew.github.io/safuncs/reference/onda_cols1.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Primary ONDA Color Vector — onda_cols1","text":"object class character length 3.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/onda_cols2.html","id":null,"dir":"Reference","previous_headings":"","what":"Secondary ONDA Color Vector — onda_cols2","title":"Secondary ONDA Color Vector — onda_cols2","text":"vector containing hex codes secondary theme colors ONDA: c(\"#163029\", \"#80C7BC\", \"#AFE2E3\", \"#D0D0AA\", \"#CEDFD7\", \"#FFFFFF\").","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/onda_cols2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Secondary ONDA Color Vector — onda_cols2","text":"","code":"data(onda_cols1) print(onda_cols1)"},{"path":"https://sean4andrew.github.io/safuncs/reference/onda_cols2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Secondary ONDA Color Vector — onda_cols2","text":"object class character length 6.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/silencer.html","id":null,"dir":"Reference","previous_headings":"","what":"Silence Code Output — silencer","title":"Silence Code Output — silencer","text":"Hide output R console applying sink(tempfile()) subsequently sink().","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/silencer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Silence Code Output — silencer","text":"","code":"silencer(x)"},{"path":"https://sean4andrew.github.io/safuncs/reference/silencer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Silence Code Output — silencer","text":"x Code output directed sink.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/silencer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Silence Code Output — silencer","text":"Code output without directed outputs, e.g. output cat().","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/surv_db_ex.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Survival Data — surv_db_ex","title":"Example Survival Data — surv_db_ex","text":"complete survival dataset survivors, based mort_db_ex. Ready proper survival analysis.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/surv_db_ex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Survival Data — surv_db_ex","text":"","code":"data(surv_db_ex) View(surv_db_ex)"},{"path":"https://sean4andrew.github.io/safuncs/reference/surv_db_ex.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Survival Data — surv_db_ex","text":"data frame containing 1200 rows 4 columns:","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/surv_sim_db_ex.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Simulated Survival Object — surv_sim_db_ex","title":"Example Simulated Survival Object — surv_sim_db_ex","text":"list generated Surv_Simul() containing following elements: simulated survival dataset (surv_simul_db), dataset describing survival characteristics population (surv_pop_db) plot illustrating (surv_plots). specified simulation parameters (arguments) Surv_Simul() fish_num_per_tank = 100, tank_num_per_trt = 4, treatments_hr = c(1, 0.7, 0.5), logHR_sd_intertank = 0, n_sim = 10, plot_out = TRUE.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/surv_sim_db_ex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Simulated Survival Object — surv_sim_db_ex","text":"","code":"data(surv_sim_db_ex) View(surv_sim_db_ex$surv_simul_db) View(surv_sim_db_ex$surv_pop_db) View(surv_sim_db_ex$surv_plots)"},{"path":"https://sean4andrew.github.io/safuncs/reference/surv_sim_db_ex.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Simulated Survival Object — surv_sim_db_ex","text":"object class list length 3.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/theme_Publication.html","id":null,"dir":"Reference","previous_headings":"","what":"Publication theme for ggplot2 — theme_Publication","title":"Publication theme for ggplot2 — theme_Publication","text":"theme function add ggplot2 object publication style plots. Function adapted HanjoStudy/quotidieR.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/theme_Publication.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Publication theme for ggplot2 — theme_Publication","text":"","code":"theme_Publication(base_size = 14)"},{"path":"https://sean4andrew.github.io/safuncs/reference/theme_Publication.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Publication theme for ggplot2 — theme_Publication","text":"base_size size text graph","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/theme_Publication.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Publication theme for ggplot2 — theme_Publication","text":"theme function add ggplot2 object","code":""},{"path":[]},{"path":"https://sean4andrew.github.io/safuncs/reference/theme_Publication.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Publication theme for ggplot2 — theme_Publication","text":"","code":"# Load an example dataset data(iris)  # Create a ggplot modified with theme_Publication() library(ggplot2) ggplot(data = iris, aes(x = Species, colour = Species, y = Petal.Length)) +    geom_boxplot() +    theme_Publication()"},{"path":"https://sean4andrew.github.io/safuncs/reference/xlsx_row2coln.html","id":null,"dir":"Reference","previous_headings":"","what":"Set First Row as Column Headers — xlsx_row2coln","title":"Set First Row as Column Headers — xlsx_row2coln","text":"Transform first row data column names subsequently remove row.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/xlsx_row2coln.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set First Row as Column Headers — xlsx_row2coln","text":"","code":"xlsx_row2coln(x)"},{"path":"https://sean4andrew.github.io/safuncs/reference/xlsx_row2coln.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set First Row as Column Headers — xlsx_row2coln","text":"x tibble / dataframe object. Initially designed output readxl::read_xlsx().","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/xlsx_row2coln.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set First Row as Column Headers — xlsx_row2coln","text":"Returns dataframe previous first rows now column names","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/xlsx_trimrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Trim Rows Based on Non-NA Values — xlsx_trimrow","title":"Trim Rows Based on Non-NA Values — xlsx_trimrow","text":"Remove rows last non-NA value selected column. Select column based coli argument.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/xlsx_trimrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trim Rows Based on Non-NA Values — xlsx_trimrow","text":"","code":"xlsx_trimrow(x, coli = 1)"},{"path":"https://sean4andrew.github.io/safuncs/reference/xlsx_trimrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trim Rows Based on Non-NA Values — xlsx_trimrow","text":"x dataframe. coli number indicating index column base trimming .","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/xlsx_trimrow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trim Rows Based on Non-NA Values — xlsx_trimrow","text":"Returns dataframe object without \"extra\" NA values selected rows.","code":""},{"path":"https://sean4andrew.github.io/safuncs/news/index.html","id":"safuncs-230","dir":"Changelog","previous_headings":"","what":"safuncs 2.3.0","title":"safuncs 2.3.0","text":"Current Revamped function Surv_Pred(). Completed Surv_Pred() documentation. Added argument Surv_Gen() Surv_Plot() account additional factor. Added data transformation assisting functions xlsx_row2coln() xlsx_trimrow(). Added miscellaneous function silencer().","code":""},{"path":"https://sean4andrew.github.io/safuncs/news/index.html","id":"safuncs-220","dir":"Changelog","previous_headings":"","what":"safuncs 2.2.0","title":"safuncs 2.2.0","text":"15Dec2024 - 17Feb2025 Added function MultiVar() used generate report multivariate analyses. Completed Surv_Power() documentation. Improved simulation speed Surv_Simul(). Added multivar_db_ex example multivariate dataset Added surv_sim_db_ex example simulated survival object Surv_Simul().","code":""},{"path":"https://sean4andrew.github.io/safuncs/news/index.html","id":"safuncs-210","dir":"Changelog","previous_headings":"","what":"safuncs 2.1.0","title":"safuncs 2.1.0","text":"14Dec2024 - 15Dec2024 Added function Surv_Power() used calculate power survival experiments. Changed various wording function documentation. Fixed end-TTEs Surv_Simul() integers. Changed code various functions (minor).","code":""}]
