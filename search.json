[{"path":"https://sean4andrew.github.io/safuncs/articles/safuncs.html","id":"survival-analysis","dir":"Articles","previous_headings":"","what":"Survival Analysis","title":"Get Started!","text":"ONDA, survival data often available scientists initially form rows entries every mortality observed. data needs converted useful form analysis R Prism. function Surv_Gen() shortens data transformation step just one line code! , showcase use. Let us first examine raw survival data can get OneDrive mort excel file: 2nd-rightmost column named TTE indicates Time Event, e.g. days post challenge, last column Status indicates type event (1 = death, 0 = sampled-survived). Missing dataset rows representing surviving fish (Status = 0); needs present proper survival analysis.  Introducing Surv_Gen()! Obtain proper survival data simply inserting mort database Surv_Gen(). Provide time (TTE) indicating fish survived starting number fish used per tank. output data’s bottom 5 rows represent generated survivors (Status = 0). also get printout messages verification purposes: can also specify tank-specific starting fish numbers using dataframe input starting_fish_count! short R script shown, can quickly regenerate survival data whenever slight change mort database; perhaps day--day corrections. wanting use generated survival data prism, set argument output_prism = TRUE Surv_Gen() save prism-ready csv. working directory. want starting ending dates Prism output, input starting date argument output_prism_date, shown: complete survival data obtained, plots can easily generated using Surv_Plots()!  plots save automatically working directory .tiff power-point editable format (.pptx). Notably, Surv_Plots() accepts many arguments can influence hazard plot particular needs tailoring specific experiment. details arguments, please see functions’ documentation page. ############CONTINUED###########","code":"data(mort_db_ex) # load example data file head(mort_db_ex, n = 5) # view first 5 rows of data #>   Tank.ID Trt.ID TTE Status #> 1      C1      B   0      1 #> 2      C6      B   4      1 #> 3      C6      B   7      1 #> 4      C1      B  19      1 #> 5      C8      D  19      1 Surv_Gen(mort_db = mort_db_ex,          starting_fish_count = 100, # per tank          last_tte = 54) #>      Tank.ID Trt.ID TTE Status #> 1196      C8      D  54      0 #> 1197      C8      D  54      0 #> 1198      C8      D  54      0 #> 1199      C8      D  54      0 #> 1200      C8      D  54      0 #> [1] \"Your total number of tanks is: 12\" #> [1] \"Your total number of treatment groups is: 4\" #> [1] \"Your total number of fish in the output data is: 1200\" # reduce example data to simplify the demonstration mort_db_ex2 = mort_db_ex[mort_db_ex$Tank.ID %in% c(\"C01\", \"C02\", \"C03\"),]  # apply Surv_Gen()! Surv_Gen(mort_db = mort_db_ex2,          starting_fish_count = data.frame(Trt.ID = c(\"B\", \"A\", \"C\"), # a vector of treatment groups for the specified tanks                                           Tank.ID = c(\"C1\", \"C2\", \"C3\"), # a vector with ALL tanks in the study                                           starting_fish_count = c(100, 100, 50)), # a vector of fish numbers in same order as Tank.IDs          last_tte = 54) Surv_Gen(mort_db = mort_db_ex,          starting_fish_count = 100, # per tank          last_tte = 54,          output_prism = TRUE,          output_prism_date = \"08-Aug-2024\") data(surv_db_ex) # load example complete survival data  Surv_Plots(surv_db_ex, # plot the survival curve and hazard curve            dailybin = FALSE) # recommended argument for good (large) sample size datasets #> NOTE: entry.status has been set to 0 for all. #> NOTE: entry.status has been set to 0 for all. #> NOTE: Dropping  1  rows with duration of follow up < tol #> NOTE: entry.status has been set to 0 for all. #> NOTE: entry.status has been set to 0 for all. #> $Survival_Plot #>  #> $Hazard_Plot"},{"path":"https://sean4andrew.github.io/safuncs/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sean Andrew. Maintainer.","code":""},{"path":"https://sean4andrew.github.io/safuncs/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Andrew S (2024). safuncs: Functions Accelerate Preparation Analysis Biological Data. R package version 2.0.0, https://sean4andrew.github.io/safuncs/, https://github.com/sean4andrew/safuncs.","code":"@Manual{,   title = {safuncs: Functions to Accelerate the Preparation and Analysis of Biological Data},   author = {Sean Andrew},   year = {2024},   note = {R package version 2.0.0, https://sean4andrew.github.io/safuncs/},   url = {https://github.com/sean4andrew/safuncs}, }"},{"path":"https://sean4andrew.github.io/safuncs/index.html","id":"safuncs","dir":"","previous_headings":"","what":"Functions to Accelerate the Preparation and Analysis of Biological Data","title":"Functions to Accelerate the Preparation and Analysis of Biological Data","text":"Functions simulate, predict, generate, plot biological data. Get started showcases core functions make analysis quicker easy. Reference lists functions example datasets documentation.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Con_Simul.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Contingency Table — Con_Simul","title":"Simulate Contingency Table — Con_Simul","text":"Simulate contingency table fish counts distributed across n lesion categories n treatment groups. Probability values generating counts cell (.e. factor level combination) can assigned using probs argument. function designed use power /false positive rate calculations; details, see Con_Simul_PR().","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Con_Simul.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Contingency Table — Con_Simul","text":"","code":"Con_Simul(   probs = \"equal\",   total_count = 750,   n_lesion = 3,   n_Trt. = 5,   margin_fixed_Trt. = FALSE,   verbose = TRUE )"},{"path":"https://sean4andrew.github.io/safuncs/reference/Con_Simul.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Contingency Table — Con_Simul","text":"probs Matrix probability values created using matrix(). row matrix represent treatment group column lesion category. probability values matrix sum 1. Default = equal probability across cells. total_count Total number counts contingency table. Defaults 750. n_lesion Number lesion categories. Ignored probs specified. Defaults 3. n_Trt. Number treatment groups. Ignored probs specified. Defaults 5. margin_fixed_Trt. Whether margins fixed per treatment group (.e. fixed number fish per treatment). Default = FALSE. See Details information marginals. verbose Whether print parameters probability matrix used. Default = TRUE.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Con_Simul.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Contingency Table — Con_Simul","text":"Returns list containing:","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Con_Simul.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Contingency Table — Con_Simul","text":"Counts simulated multinomial distribution using rmultinom(). Counts may assumed fixed total marginals (e.g. per treatment group) fixed total row column marginals. discussion types marginals contingency tables, refer : comments Arguments.","code":""},{"path":[]},{"path":"https://sean4andrew.github.io/safuncs/reference/Con_Simul.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Contingency Table — Con_Simul","text":"","code":"Con_Tab = Con_Simul(total_count = 750, n_lesion = 3, n_Trt. = 5) Con_Tab = Con_Simul(probs = matrix(nrow = 2, ncol = 3, c(1/6, 3/12, 1/6, 1/6, 1/6, 1/12)))"},{"path":"https://sean4andrew.github.io/safuncs/reference/Con_Simul_PR.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Positive Rates for Contingency Table — Con_Simul_PR","title":"Calculate Positive Rates for Contingency Table — Con_Simul_PR","text":"Computes statistical power optionally false positive rates tests applied contingency tables based simulations. Specify simulation process using Con_Simul(), serves input. Positive rates computed Chi-square test optionally Fisher's exact test Wald test applied ordinal regression model.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Con_Simul_PR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Positive Rates for Contingency Table — Con_Simul_PR","text":"","code":"Con_Simul_PR(   Con_Simul_Object = Con_Simul(),   add_fisher_exact = FALSE,   add_ord = FALSE,   sample_sizes = NULL,   n_sim = 1000,   FPR = TRUE )"},{"path":"https://sean4andrew.github.io/safuncs/reference/Con_Simul_PR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Positive Rates for Contingency Table — Con_Simul_PR","text":"Con_Simul_Object Output Con_Simul() argument verbose set TRUE. add_fisher_exact Whether compute positive rates Fisher's Exact test. May add >1 min calculation time. Defaults FALSE. add_ord Whether compute positive rates Wald test fitted ordinal regression model. May add >1 min calculation time. Defaults FALSE. sample_sizes vector sample sizes false positive rates calculated. sample size defined total number counts contingency table. Defaults total count received Con_Simul_Object. n_sim Number contingency tables simulated positive rate calculation. Defaults 1000. FPR Whether calculate false positive rate addition power. Defaults TRUE.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Con_Simul_PR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Positive Rates for Contingency Table — Con_Simul_PR","text":"Returns list containing:","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Con_Simul_PR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Positive Rates for Contingency Table — Con_Simul_PR","text":"Power defined percentage tests yielding positive results (p-value < 0.05) set contingency tables simulated based data-generating process probability matrix specified Con_Simul(). specified probability matrix represent parameters population desire detect significant effect sample. simulated contingency tables reflect sample outcomes specified population parameter. False Positive Rate defined percentage tests yielding positive results (p-value < 0.05) contingency tables simulated based probability matrix without treatment effect. odd ratios lesion scores treatment groups assumed control (first row probability matrix). P-values Chi-square test computed using stats::chisq.test() default parameters. P-values Fisher's exact test computed using stats::fisher.test() simulate.p.value set TRUE, alongside default parameters. P-values ordinal regression computed stats::anova() applied output ordinal::clm().","code":""},{"path":[]},{"path":"https://sean4andrew.github.io/safuncs/reference/Con_Simul_PR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Positive Rates for Contingency Table — Con_Simul_PR","text":"","code":"## Below I show how we can perform a simple power calculation using this tool. ## Suppose I want to calculate power for Treatment B which halves the lesions in category 2 and 3. ## I then specify the following probability matrix and feed it into Con_Simul(): probs_mat = matrix(nrow = 2, ncol = 3, data = c(1/6, 1/3, 1/6, 1/12, 1/6, 1/12)) sim_tab = Con_Simul(probs_mat)  ## Next, I feed the output into Con_Simul_PR(): Con_Simul_PR(sim_tab, sample_sizes = c(50, 100, 150)) #> $pos_rate #>    Total_Count Percent_of_Significant_Results Statistical_Test Class #> 1           50                           56.8        Chisquare Power #> 2          100                           87.5        Chisquare Power #> 3          150                           95.7        Chisquare Power #> 10          50                            4.1        Chisquare   FPR #> 11         100                            5.7        Chisquare   FPR #> 12         150                            4.8        Chisquare   FPR #>  #> $eff_mat #>           [,1]       [,2]       [,3] #> [1,] 0.1666667 0.16666667 0.16666667 #> [2,] 0.3333333 0.08333333 0.08333333 #>  #> $null_mat #>           [,1]      [,2]      [,3] #> [1,] 0.1666667 0.1666667 0.1666667 #> [2,] 0.1666667 0.1666667 0.1666667 #>  #> $plot  #>  ## Results: Power is ~55, 86, and 97% for the Chi-square test using total counts of 50, 100, and 150, respectively.  ## The same power for Chi-square test can be calculated using Cohen's omega (w) method which is faster but has its own limitations; ## e.g. assumes one data generating process for the contingency table (the no fixed marginals). library(pwr) pwr::pwr.chisq.test(w = ES.w2(probs_mat), df = 2, sig.level = 0.05, N = 100) #>  #>      Chi squared power calculation  #>  #>               w = 0.3333333 #>               N = 100 #>              df = 2 #>       sig.level = 0.05 #>           power = 0.8563144 #>  #> NOTE: N is the number of observations #>  ## Results: Power is 85.6% for the Chi-square test at the total count of 100."},{"path":"https://sean4andrew.github.io/safuncs/reference/GG_Colour_Hue.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Default Colours by ggplot — GG_Colour_Hue","title":"Get Default Colours by ggplot — GG_Colour_Hue","text":"function useful ! Origin","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/GG_Colour_Hue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Default Colours by ggplot — GG_Colour_Hue","text":"","code":"GG_Colour_Hue(n)"},{"path":"https://sean4andrew.github.io/safuncs/reference/GG_Colour_Hue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Default Colours by ggplot — GG_Colour_Hue","text":"n Number colour groups","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/GG_Colour_Hue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Default Colours by ggplot — GG_Colour_Hue","text":"Returns vector representing default colour codes assigned group ggplot.","code":""},{"path":[]},{"path":"https://sean4andrew.github.io/safuncs/reference/GG_Colour_Hue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Default Colours by ggplot — GG_Colour_Hue","text":"","code":"# Get colour codes used for 6 categorical groups GG_Colour_Hue(6) #> [1] \"#F8766D\" \"#B79F00\" \"#00BA38\" \"#00BFC4\" \"#619CFF\" \"#F564E3\""},{"path":"https://sean4andrew.github.io/safuncs/reference/Label_Gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Text for Labels — Label_Gen","title":"Generate Text for Labels — Label_Gen","text":"function combines texts (strings) numbers specified Arguments function. function originally made automate label generation lab use.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Label_Gen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Text for Labels — Label_Gen","text":"","code":"Label_Gen(   study_id,   timepoint,   trt_tank_id,   animal,   animal_numbers,   tissue,   repli_num,   n_col = 6 )"},{"path":"https://sean4andrew.github.io/safuncs/reference/Label_Gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Text for Labels — Label_Gen","text":"study_id single text (vector). Must NA. timepoint single text (vector) representing sampling timepoint(s). Set = NA applicable. trt_tank_id single text (vector) representing treatment tank ID combinations. Set = NA applicable. animal single text (vector) representing group animal(s). Set = NA applicable. animal_numbers numeric (vector) representing number IDs animals. Set = NA applicable. tissue single text (vector) representing tissue type(s). Set = NA applicable. repli_num numeric (vector) representing replicate number(s). Set = NA applicable. n_col numeric corresponding number columns label paper (output matrix). Defaults 6.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Label_Gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Text for Labels — Label_Gen","text":"Returns matrix text representing combinations. Matrix automatically saved .csv working directory.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Label_Gen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Text for Labels — Label_Gen","text":"Computes possible combination variables provided Arguments. Output combinations sorted ascending alphanumeric order.","code":""},{"path":[]},{"path":"https://sean4andrew.github.io/safuncs/reference/Label_Gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Text for Labels — Label_Gen","text":"","code":"# set working directory setwd(\"C:/Users/sean4/Downloads\") # make sure to use \"/\" instead of \"\\\" (which is the default you might get from Windows) #> Error in setwd(\"C:/Users/sean4/Downloads\"): cannot change working directory  # apply Label_Gen()! Label_Gen(study_id = \"ONDA01180\",           timepoint = \"Baseline\",           trt_tank_id = c(\"Tk.F01-TrtA\", \"Tk.F02-TrtA\", \"Tk.F03-TrtB\", \"Tk.F04-TrtB\"),           animal = \"Fish\",           animal_numbers = 1:4,           tissue = NA,           repli_num = 1:2,           n_col = 6) #> Error in FUN(X[[i]], ...): object 'study_id' not found"},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Gen.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Survivor Data — Surv_Gen","title":"Generate Survivor Data — Surv_Gen","text":"Produces survival data includes rows every surviving fish based starting number fish mortality data. generate survivor data tanks absent input mortality dataframe, specify arguments tank_without_mort trt_without_mort. generate survivor data tank specific starting numbers fish, input dataframe argument starting_fish_count instead single value; details Arguments.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Gen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Survivor Data — Surv_Gen","text":"","code":"Surv_Gen(   mort_db,   starting_fish_count,   last_tte,   tank_without_mort = NULL,   trt_without_mort = NULL,   output_prism = FALSE,   output_prism_date = NULL )"},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Gen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Survivor Data — Surv_Gen","text":"mort_db mort dataframe described Details. starting_fish_count Value representing starting number fish every tank. Alternatively, dataframe containing columns \"Trt.ID\", \"Tank.ID\", \"starting_fish_count\" allow different fish starting numbers per tank. last_tte Value representing time--event fish survived , assigned every row survivor data generated. tank_without_mort vector strings specifying tanks absent mort_db; used generate survivor data tanks. Argument ignored starting_fish_count dataframe. trt_without_mort vector strings corresponding tank_without_mort. Keep order . Argument ignored starting_fish_count dataframe. output_prism Whether generate save prism ready survival csv. Defaults FALSE. output_prism_date starting date used prism file. Please specify date \"dd-Mmm-yyyy\" syntax (e.g. \"08-Aug-2024\").","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Gen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Survivor Data — Surv_Gen","text":"dataframe produced combining input mort data generated rows survivor data.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Gen.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Survivor Data — Surv_Gen","text":"mort dataframe supplied input consist following 4 columns minimum: \"Trt.ID\" = Labels treatment groups study. \"Tank.ID\" = Labels tanks study (tank must unique label). \"TTE\" = Time Event. Event fish death sampled removed depending \"Status\". \"Status\" = Value indicating happened TTE. 1 dead fish, 0 sampled removed. row represent one fish. example dataframe, execute data(mort_db_ex) view.","code":""},{"path":[]},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Gen.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Survivor Data — Surv_Gen","text":"","code":"# First, we load an example mortality database available from the safuncs package data(mort_db_ex)  # Next, we input this data into Surv_Gen() as well as the study details to generate entries (rows) for survivors in the output - a \"complete\" dataframe for further survival analysis and data visualization. Surv_Data_Output = Surv_Gen(mort_db = mort_db_ex,                    starting_fish_count = 100,                    last_tte = 54,                    tank_without_mort = c(\"C99\", \"C100\"),                    trt_without_mort = c(\"A\", \"B\")) #> [1] \"Your total number of tanks is: 14\" #> [1] \"Your total number of treatment groups is: 4\" #> [1] \"Your total number of fish in the output data is: 1400\"  # Below, the bottom 5 rows of the output is displayed to show the rows of survivor data generated. tail(Surv_Data_Output, n = 5) #>      Tank.ID Trt.ID TTE Status #> 1396    C100      B  54      0 #> 1397    C100      B  54      0 #> 1398    C100      B  54      0 #> 1399    C100      B  54      0 #> 1400    C100      B  54      0"},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Survival Plots — Surv_Plots","title":"Generate Survival Plots — Surv_Plots","text":"Produces Kaplan-Meier Survival Plot /Hazard Time Plot survival data. plot contains multiple curves different treatment groups. Plots saved automatically working directory.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Survival Plots — Surv_Plots","text":"","code":"Surv_Plots(   surv_db,   plot_prefix = \"plot_prefix\",   xlim = NULL,   ylim = c(0, 1),   xlab = \"Days Post Challenge\",   lambda = NULL,   phi = NULL,   dailybin = TRUE,   plot = \"both\",   colours = NULL,   theme = \"ggplot\",   trt_order = NULL,   data_out = FALSE,   plot_dim = c(6, 4) )"},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Survival Plots — Surv_Plots","text":"surv_db survival dataframe described Details. plot_prefix string specifying prefix filename saved plots. xlim vector specifying plots x-axis lower upper limits, respectively. ylim vector specifying Survival Plot y-axis lower upper limits, respectively. xlab string specifying plot x-axis label. lambda Smoothing value hazard curve. Higher lambda produces greater smoothing. Defaults NULL bshazard() uses provided survival data estimate lambda; NULL specification recommended large sample size situations usually occurs full-scale studies many mortalities tank-replication. low sample sizes, lambda estimate can unreliable. Choosing lambda 10 (anywhere 1-100) probably produces accurate hazard curve situations. place choosing lambda, choosing phi recommended; see . phi Dispersion parameter count model used hazard curve estimation. Defaults NULL bshazard() uses provided survival data estimate phi; NULL specification recommended large sample size situations. low sample sizes, phi estimate can unreliable. Choosing phi value 1 low sample sizes recommended. value 1 (close) seems estimated past Tenaci data (QCATC997; phi ~ 0.8-1.4) large sample sizes tank-replication. phi value 1 indicates set counts (deaths) time Poisson distribution, following different hazard rates along curve overdispersed (phi > 1). dailybin Whether set time bins daily (1 TTE) intervals. Refer bshazard() documentation understanding role bins hazard curve estimation. Please set TRUE low sample sizes set FALSE large sample sizes (often tank replication), although large sample sizes either TRUE FALSE produces similar results usually. Defaults TRUE. plot plot output. Use \"surv\" Kaplan-Meier Survival Curve, \"haz\" Hazard Curve, \"\" . Defaults \"\". colours Vector color codes different treatment groups plot. Defaults ggplot2 default palette. theme Character string specifying graphics theme plots. Theme \"ggplot2\" \"prism\" currently available. Defaults \"ggplot2\". trt_order Vector representing order treatment groups plots. Defaults NULL alphabetical order used. data_out Whether print survival /hazard databases illustrated plots. Defaults FALSE. plot_dim Vector representing dimensions (width, height) save plot .tiff .pptx.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Plots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Survival Plots — Surv_Plots","text":"argument plot = \"\", returns Kaplan-Meier Survival Curve Hazard Curve. Output can trimmed setting plot = \"haz\" plot = \"surv\". data_out = TRUE, returns list plot(s) associated dataframes create .","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Plots.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Survival Plots — Surv_Plots","text":"survival dataset dataframe containing least 4 different columns: \"Trt.ID\" = Labels treatment groups study. \"Tank.ID\" = Labels tanks study (tank must unique label). \"TTE\" = Time Event. Event depends \"Status\". \"Status\" = Value indicating happened TTE. 1 dead fish, 0 survivors sampled removed. row represent one fish. example dataframe, execute data(surv_db_ex) view. details statistical methodology used bshazard(), refer : . General concept: h(t) hazard function considered count model number deaths response variable. .e, death_count(t) = h(t) * P(t) P(t) number alive function time h(t) modeled time using basis splines. basis spline curvatures assumed normal distribution mean 0 (random effect). Based assumption, author found variance curvatures (.e. smoothness) equal -dispersion (phi) death counts related (divided) smoothness parameter (lambda). Phi lambda can estimated data specified user. Specification can helpful low sample size situations overdispersion (phi) estimates found unreliable clearly wrong (based understanding realistic estimates estimated past data adequate, large sample sizes).","code":""},{"path":[]},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Plots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Survival Plots — Surv_Plots","text":"","code":"#Starting from an example mortality database, we first generate the complete survivor data using Surv_Gen() data(mort_db_ex) surv_dat = Surv_Gen(mort_db = mort_db_ex,                     starting_fish_count = 100,                     last_tte = 54) #> [1] \"Your total number of tanks is: 12\" #> [1] \"Your total number of treatment groups is: 4\" #> [1] \"Your total number of fish in the output data is: 1200\"  #Create plot by inputting surv_dat into Surv_Plots()! Surv_Plots(surv_db = surv_dat,            plot_prefix = \"QCATC777\",            xlim = c(0, 54),            ylim = c(0, 1),            xlab = \"TTE\",            plot = \"both\",            dailybin = FALSE) #> NOTE: entry.status has been set to 0 for all. #> NOTE: entry.status has been set to 0 for all. #> NOTE: Dropping  1  rows with duration of follow up < tol #> NOTE: entry.status has been set to 0 for all. #> NOTE: entry.status has been set to 0 for all. #> $Survival_Plot  #>  #> $Hazard_Plot  #>"},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Pred.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict End Survival Rate — Surv_Pred","title":"Predict End Survival Rate — Surv_Pred","text":"Predict survival rate given survival dataset provided reference survival database used estimate reference hazard curve. Prediction done separately treatment group.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Pred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict End Survival Rate — Surv_Pred","text":"","code":"Surv_Pred(   pred_db,   ref_db,   predsr_tte,   method = 2,   coxph_mod = \"GLMM\",   lambda_pred = NULL,   phi_pred = NULL )"},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Pred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict End Survival Rate — Surv_Pred","text":"pred_db Placeholder ref_db Placeholder predsr_tte Placeholder method Placeholder coxph_mod Placeholder lambda_pred Placeholder phi_pred Placeholder","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Pred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict End Survival Rate — Surv_Pred","text":"Placeholder","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Pred.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict End Survival Rate — Surv_Pred","text":"P","code":""},{"path":[]},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Pred.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict End Survival Rate — Surv_Pred","text":"","code":"#Placeholder"},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Simul.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Survival Data — Surv_Simul","title":"Simulate Survival Data — Surv_Simul","text":"Simulates survival data based set user-specified experimental parameters reference hazard curve (e.g. hazard curve control group). Able simulate data inter-cluster (e.g. tank) variation added based framework mixed cox proportional hazards model (coxme::coxme). Able simulate right censored data (e.g. sampled fish) using sampling_specs argument. Optionally produces plot illustrating characteristics simulated data population / truth data (sample) simulated.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Simul.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Survival Data — Surv_Simul","text":"","code":"Surv_Simul(   haz_db,   fish_num_per_tank = 100,   tank_num_per_trt = 4,   treatments_hr = c(1, 1, 1, 1),   logHR_sd_intertank = 0,   sampling_specs = NULL,   n_sim = 1,   plot_out = TRUE,   pop_out = TRUE,   plot_name = \"Surv_Simul-Plot-Output\",   theme = \"ggplot2\" )"},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Simul.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Survival Data — Surv_Simul","text":"haz_db dataframe representing reference hazard curve; can generated bshazard() Surv_Plots(). fish_num_per_tank number fish simulate per tank. Defaults 100. tank_num_per_trt number tanks simulate per treatment group. Defaults 4. treatments_hr vector representing hazard ratios treatment groups starting reference/control (HR = 1). Length vector represents number treatment groups. Defaults c(1, 1, 1, 1). logHR_sd_intertank standard deviation inter-tank variation log(HR) scale according coxme framework. Defaults 0 (inter-tank variation) quite oftenly, estimate injected Trojan fish data. reference 0.1 reflects low inter-tank variation situation, 0.35 fairly high can occurred immersion challenged fish datasets. sampling_specs dataframe representing number / amount right censored data (e.g. sampled fish) per tank different times represented two columns \"Amount\" \"TTE\", respectively. See Examples example use. Defaults NULL (sampling). n_sim Number survival dataset simulate. Defaults 1. plot_out Whether output information plot (details Value). Defaults TRUE. pop_out Whether output dataframe containing survival probability values population. Defaults TRUE. plot_name Character string specifying name saved plot. Defaults \"Surv_Simul-Plot-Output\". theme Character string specifying graphics theme plots. Theme \"ggplot2\" \"prism\" currently available. Defaults \"ggplot2\".","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Simul.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Survival Data — Surv_Simul","text":"minimum, returns simulated survival dataframe consisting 5 columns: TTE (Time Event), Status (0 / 1), Trt.ID, Tank.ID, n_sim represents simulation number data subsets. plot_out = TRUE, outputs list additionally contains Kaplan-Meier survival plot. plot illustrates survival curve end survival rates simulated dataset well population. number simulated dataset greater 1, multiple curves drawn representing statement provided regarding power detect effect Treatment – specifically, percent positive (p < 0.05) global log-rank test using survival::survdiff(). pop_out = TRUE, outputs list additionally contains dataframe representing survival probability values population / truth sample supposedly taken.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Simul.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Survival Data — Surv_Simul","text":"Simulations based uniform-probability draws (U ~ (0, 1)) set events can expressed function time using cumulative density function failures (F(t), .e. cumulative mort. curve). F(t) can transformed cumulative hazard function H(t), hence relationship H(t) uniform draws (U) also known (derivation equation Bender et al. (2003). H(t) related (integral) hazard function h(t), since h(t) related effects (e.g. treatment tank) based cox proportional hazards model, effects can now incorporated simulation process can interacted U. simulation process follows: Surv_Simul() takes random sample U (e.g. 0.7). U transformed H relationship known (see Bender et al. 2003) : H = -log(U) ⋅ exp(-log(β)); β representing treatment tank effects. function H(t) inverse (known supplied reference hazard curve) applied H obtain t (time event) represents survival data. Data t beyond last follow-period represent survivors (Status set 0), , represents mortalities (Status set 1). verify correct \"randomness\" produced simulated survival data, given adding \"randomness\" whole point simulations (), 5 different validation checks performed (documented pdf uploaded github). checks showed HR estimated fitting two curves sampled population, converges mean 1 () many simulations, across simulations HR varies expected (SD simulated HRs = SE HR supposed cox model). checks also showed p-value obtained applying log-rank test null (-effect) simulated datasets, distribution uniform (), false positive rate 0.05 given alpha used 0.05 (). Additionally, power calculated simulations equal power calculated online calculator. Last, checks showed variations simulated survival curve similar observed curves simulated using different, limited, method (bootstraping / re-sampling replacement).","code":""},{"path":[]},{"path":"https://sean4andrew.github.io/safuncs/reference/Surv_Simul.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Survival Data — Surv_Simul","text":"","code":"#Starting from an example mortality database, we first generate the complete survivor #data using Surv_Gen() data(mort_db_ex) surv_dat = Surv_Gen(mort_db = mort_db_ex,                     starting_fish_count = 100,                     last_tte = 54) #> [1] \"Your total number of tanks is: 12\" #> [1] \"Your total number of treatment groups is: 4\" #> [1] \"Your total number of fish in the output data is: 1200\"  #Filter for the control group (\"A\") to get a reference hazard curve for simulations surv_dat_A = surv_dat[surv_dat$Trt.ID == \"A\", ]  #Estimate the hazard curve of the control group and get the associated hazard #dataframe using bshazard::bshazard() or safuncs::Surv_Plots()$Hazard_DB ref_haz_route_bshazard = bshazard::bshazard(data = surv_dat_A,                                             survival::Surv(TTE, Status) ~ Tank.ID,                                             nbin = max(surv_dat_A$TTE),                                             verbose = FALSE) #> NOTE: entry.status has been set to 0 for all. ref_haz_route_bshazard = data.frame(summary(ref_haz_route_bshazard)$HazardEstimates)  ref_haz_route_safuncs = safuncs::Surv_Plots(surv_db = surv_dat_A,                                             data_out = TRUE)$Hazard_DB #> NOTE: entry.status has been set to 0 for all.  #Simulate! Sampled 10 fish per tank at 45 DPC, but otherwise default conditions. Surv_Simul(haz_db = ref_haz_route_safuncs,            treatments_hr = c(1, 0.8, 0.5),            sampling_specs = data.frame(Amount = 10,                                        TTE = 45))$surv_plots   #Simulate multiple times to better answer the question: are my future samples #likely to be good approximates of the truth / population Surv_Simul(haz_db = ref_haz_route_safuncs,            treatments_hr = c(1, 0.8, 0.5),            sampling_specs = data.frame(Amount = 10,                                        TTE = 45),            n_sim = 4)$surv_plots"},{"path":"https://sean4andrew.github.io/safuncs/reference/haz_db_ex.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Hazard Data — haz_db_ex","title":"Example Hazard Data — haz_db_ex","text":"reference hazard dataframe created using Surv_Plots(data_out = TRUE)$Hazard_DB uses bshazard::bshazard(). Contains hazard rates time.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/haz_db_ex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Hazard Data — haz_db_ex","text":"","code":"data(haz_db_ex) view(haz_db_ex)"},{"path":"https://sean4andrew.github.io/safuncs/reference/haz_db_ex.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Hazard Data — haz_db_ex","text":"data frame containing 54 rows 3 columns:","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/mort_db_ex.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Mort Data — mort_db_ex","title":"Example Mort Data — mort_db_ex","text":"subset columns taken online excel mortality file OneDrive.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/mort_db_ex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Mort Data — mort_db_ex","text":"","code":"data(mort_db_ex) view(mort_db_ex)"},{"path":"https://sean4andrew.github.io/safuncs/reference/mort_db_ex.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Mort Data — mort_db_ex","text":"data frame containing 399 rows 4 columns:","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/surv_db_ex.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Survival Data — surv_db_ex","title":"Example Survival Data — surv_db_ex","text":"complete survival dataset survivors, based mort_db_ex. Ready proper survival analysis.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/surv_db_ex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Survival Data — surv_db_ex","text":"","code":"data(surv_db_ex) view(surv_db_ex)"},{"path":"https://sean4andrew.github.io/safuncs/reference/surv_db_ex.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example Survival Data — surv_db_ex","text":"data frame containing 1200 rows 4 columns:","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/theme_Publication.html","id":null,"dir":"Reference","previous_headings":"","what":"Publication theme for ggplot2 — theme_Publication","title":"Publication theme for ggplot2 — theme_Publication","text":"theme function add ggplot2 object publication style plots. Function adapted HanjoStudy/quotidieR.","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/theme_Publication.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Publication theme for ggplot2 — theme_Publication","text":"","code":"theme_Publication(base_size = 14)"},{"path":"https://sean4andrew.github.io/safuncs/reference/theme_Publication.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Publication theme for ggplot2 — theme_Publication","text":"base_size size text graph","code":""},{"path":"https://sean4andrew.github.io/safuncs/reference/theme_Publication.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Publication theme for ggplot2 — theme_Publication","text":"theme function add ggplot2 object","code":""},{"path":[]},{"path":"https://sean4andrew.github.io/safuncs/reference/theme_Publication.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Publication theme for ggplot2 — theme_Publication","text":"","code":"#Load an example dataset data(iris)  #Create a ggplot modified with theme_Publication() library(ggplot2) ggplot(data = iris, aes(x = Species, colour = Species, y = Petal.Length)) +    geom_boxplot() +    theme_Publication()"}]
